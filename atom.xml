<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DecodeZ</title>
  
  <subtitle>刚日读经，柔日读史</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://decodezp.github.io/"/>
  <updated>2018-12-06T06:45:25.440Z</updated>
  <id>https://decodezp.github.io/</id>
  
  <author>
    <name>Pan Zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>可以预测交通路况的 APP</title>
    <link href="https://decodezp.github.io/2018/12/06/life-traffic-prediction/"/>
    <id>https://decodezp.github.io/2018/12/06/life-traffic-prediction/</id>
    <published>2018-12-06T06:41:18.000Z</published>
    <updated>2018-12-06T06:45:25.440Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;能不能有这样一款应用&lt;br&gt;
    
    </summary>
    
      <category term="life" scheme="https://decodezp.github.io/categories/life/"/>
    
    
      <category term="life" scheme="https://decodezp.github.io/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>测来测去2：CPU缓存读入策略</title>
    <link href="https://decodezp.github.io/2018/12/06/test2-cache-line-alignment/"/>
    <id>https://decodezp.github.io/2018/12/06/test2-cache-line-alignment/</id>
    <published>2018-12-06T06:18:31.000Z</published>
    <updated>2018-12-06T06:29:21.926Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;到底哪些数据写入了CPU缓存&quot;&gt;&lt;a href=&quot;#到底哪些数据写入了CPU缓存&quot; class=&quot;headerlink&quot; title=&quot;到底哪些数据写入了CPU缓存&quot;&gt;&lt;/a&gt;到底哪些数据写入了CPU缓存&lt;/h2&gt;&lt;p&gt;我们知道CPU会在要读写某个数据时，先将数据写入缓存。&lt;/p&gt;
&lt;p&gt;我们也知道这个操作一般以Cache Line为操作粒度，并且Cache Line的长度一般为64Byte。&lt;br&gt;
    
    </summary>
    
      <category term="test" scheme="https://decodezp.github.io/categories/test/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="hardware" scheme="https://decodezp.github.io/tags/hardware/"/>
    
      <category term="CPU" scheme="https://decodezp.github.io/tags/CPU/"/>
    
      <category term="test" scheme="https://decodezp.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>魏孝文帝教你提proposal</title>
    <link href="https://decodezp.github.io/2018/12/05/history-tuobahong/"/>
    <id>https://decodezp.github.io/2018/12/05/history-tuobahong/</id>
    <published>2018-12-05T07:09:12.000Z</published>
    <updated>2018-12-05T07:14:40.277Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;艰难的Proposal&quot;&gt;&lt;a href=&quot;#艰难的Proposal&quot; class=&quot;headerlink&quot; title=&quot;艰难的Proposal&quot;&gt;&lt;/a&gt;艰难的Proposal&lt;/h2&gt;&lt;p&gt;每个人都有独自一人面对全世界的时候，即便你是魏孝文帝拓跋宏。&lt;/p&gt;
&lt;p&gt;北魏太和十七年，承平日久的北魏都城里正在酝酿一件大事——迁都。&lt;br&gt;
    
    </summary>
    
      <category term="history" scheme="https://decodezp.github.io/categories/history/"/>
    
    
      <category term="history" scheme="https://decodezp.github.io/tags/history/"/>
    
  </entry>
  
  <entry>
    <title>ftrace uprobe使用填坑历程</title>
    <link href="https://decodezp.github.io/2018/12/04/ftrace-uprobe/"/>
    <id>https://decodezp.github.io/2018/12/04/ftrace-uprobe/</id>
    <published>2018-12-04T04:25:59.000Z</published>
    <updated>2018-12-04T04:28:56.558Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h2&gt;&lt;p&gt;打算用一下&lt;code&gt;ftrace&lt;/code&gt;对用户态程序的trace支持。&lt;/p&gt;
&lt;h3 id=&quot;测试用程序test-c：&quot;&gt;&lt;a href=&quot;#测试用程序test-c：&quot; class=&quot;headerlink&quot; title=&quot;测试用程序test.c：&quot;&gt;&lt;/a&gt;测试用程序&lt;code&gt;test.c&lt;/code&gt;：&lt;/h3&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="ftrace" scheme="https://decodezp.github.io/tags/ftrace/"/>
    
  </entry>
  
  <entry>
    <title>ftrace trace-cmd kernelshark资料汇总</title>
    <link href="https://decodezp.github.io/2018/11/30/ftrace/"/>
    <id>https://decodezp.github.io/2018/11/30/ftrace/</id>
    <published>2018-11-30T06:22:55.000Z</published>
    <updated>2018-11-30T06:39:04.849Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;一些关于这一类技术的资料和文档汇总。&lt;br&gt;文章中可以找到比较详细的工具使用方法。如果想了解更多内容可以阅读&lt;code&gt;linux/Documentation/trace&lt;/code&gt;下的文档以及源码。&lt;/p&gt;
&lt;p&gt;以及&lt;code&gt;git log ./kernel/trace&lt;/code&gt; :)&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
      <category term="linux" scheme="https://decodezp.github.io/categories/tech/linux/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="ftrace" scheme="https://decodezp.github.io/tags/ftrace/"/>
    
      <category term="linux" scheme="https://decodezp.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>测来测去1：DPDK no-huge模式性能对比测试</title>
    <link href="https://decodezp.github.io/2018/11/29/test1-dpdk-no-huge/"/>
    <id>https://decodezp.github.io/2018/11/29/test1-dpdk-no-huge/</id>
    <published>2018-11-29T05:20:58.000Z</published>
    <updated>2018-11-29T05:30:48.738Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;no-huge&quot;&gt;&lt;a href=&quot;#no-huge&quot; class=&quot;headerlink&quot; title=&quot;no-huge&quot;&gt;&lt;/a&gt;no-huge&lt;/h2&gt;&lt;p&gt;DPDK使用大页内存作为性能优化的一个手段。但大页内存在云计算等环境下可能会出现内存资源浪费的情况，作为售卖资源的云服务商，希望能找到更充分的内存资源利用的方法。在此背景下，DPDK引入了no-huge机制，即不使用hugepage，从而解放更多的系统资源。&lt;/p&gt;
&lt;p&gt;那么这种配置下DPDK性能会下降多少呢？还是需要实际定量测试一下。&lt;br&gt;
    
    </summary>
    
      <category term="test" scheme="https://decodezp.github.io/categories/test/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="test" scheme="https://decodezp.github.io/tags/test/"/>
    
      <category term="dpdk" scheme="https://decodezp.github.io/tags/dpdk/"/>
    
  </entry>
  
  <entry>
    <title>云计算的发展需要向社区街道管理看齐</title>
    <link href="https://decodezp.github.io/2018/11/28/thoughts1-cloud-community/"/>
    <id>https://decodezp.github.io/2018/11/28/thoughts1-cloud-community/</id>
    <published>2018-11-28T05:47:57.000Z</published>
    <updated>2018-11-28T05:53:19.517Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;服务&quot;&gt;&lt;a href=&quot;#服务&quot; class=&quot;headerlink&quot; title=&quot;服务&quot;&gt;&lt;/a&gt;服务&lt;/h2&gt;&lt;p&gt;云计算本质上是一种服务。由各种不同的组件为租户提供计算、网络和存储服务。&lt;/p&gt;
&lt;p&gt;用户对这些服务的要求除了功能之外，还有安全性、可用性、性能、成本、迁移难度、SLA等一系列要求。&lt;/p&gt;
&lt;p&gt;与之类比，社区街道作为一个完整的功能单元，各个基层职能部门，也为社区内的居民提供各类生活服务。&lt;/p&gt;
&lt;p&gt;如何做好基层工作，是需要费一番脑筋的。&lt;br&gt;
    
    </summary>
    
      <category term="thoughts" scheme="https://decodezp.github.io/categories/thoughts/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="thoughts" scheme="https://decodezp.github.io/tags/thoughts/"/>
    
      <category term="cloud" scheme="https://decodezp.github.io/tags/cloud/"/>
    
  </entry>
  
  <entry>
    <title>几句话说清楚3:什么是False Sharing</title>
    <link href="https://decodezp.github.io/2018/11/27/quickwords3-falsesharing/"/>
    <id>https://decodezp.github.io/2018/11/27/quickwords3-falsesharing/</id>
    <published>2018-11-27T05:12:54.000Z</published>
    <updated>2018-11-27T05:22:37.184Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;不用图&quot;&gt;&lt;a href=&quot;#不用图&quot; class=&quot;headerlink&quot; title=&quot;不用图&quot;&gt;&lt;/a&gt;不用图&lt;/h2&gt;&lt;p&gt;以为又要见到那几张网上已经用烂了的图了是不是？这次我们不用图来讲这个事。&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
      <category term="quickwords" scheme="https://decodezp.github.io/categories/tech/quickwords/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="hardware" scheme="https://decodezp.github.io/tags/hardware/"/>
    
      <category term="CPU" scheme="https://decodezp.github.io/tags/CPU/"/>
    
  </entry>
  
  <entry>
    <title>几句话说清楚2:CPU缓存的组织形式</title>
    <link href="https://decodezp.github.io/2018/11/25/quickwords2-cacheassociativity/"/>
    <id>https://decodezp.github.io/2018/11/25/quickwords2-cacheassociativity/</id>
    <published>2018-11-25T07:18:27.000Z</published>
    <updated>2018-11-25T07:34:15.623Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;缓存&quot;&gt;&lt;a href=&quot;#缓存&quot; class=&quot;headerlink&quot; title=&quot;缓存&quot;&gt;&lt;/a&gt;缓存&lt;/h2&gt;&lt;p&gt;缓存和其他存储形式在功能形式上没有太大区别，均是输入一个地址，还你一个数据。但作为一个缓存，要考虑如何在有限的容量下保证较高的命中率以及查找效率(&lt;a href=&quot;https://decodezp.github.io/2018/11/20/cachesize/&quot;&gt;相关阅读&lt;/a&gt;)。这个问题从本质上来说，就是如何建立缓存地址与内存地址的映射关系。&lt;/p&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
      <category term="quickwords" scheme="https://decodezp.github.io/categories/tech/quickwords/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="hardware" scheme="https://decodezp.github.io/tags/hardware/"/>
    
      <category term="CPU" scheme="https://decodezp.github.io/tags/CPU/"/>
    
  </entry>
  
  <entry>
    <title>XXV710网卡Target Link Speed探秘</title>
    <link href="https://decodezp.github.io/2018/11/23/x710-target-link-speed/"/>
    <id>https://decodezp.github.io/2018/11/23/x710-target-link-speed/</id>
    <published>2018-11-23T11:26:48.000Z</published>
    <updated>2018-11-23T11:31:44.132Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;发现&quot;&gt;&lt;a href=&quot;#发现&quot; class=&quot;headerlink&quot; title=&quot;发现&quot;&gt;&lt;/a&gt;发现&lt;/h2&gt;&lt;p&gt;用lspci指令查看PCIe设备，特别是网卡设备经常会查看LnkCap及LnkSta字段，以确保网卡运行在期望的PCIe总线类型/带宽上，从而保证网卡的性能。&lt;/p&gt;
&lt;p&gt;最近拿到一块XXV710-DA2，插上之后简单看了一下状态。LnkCap和LnkSta均显示为Speed 8GT/s，Width x8，没太大问题。这时候无意中瞥见LnkCtl2中Target Link Speed显示为2.5GT/s，引发了兴趣。&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="hardware" scheme="https://decodezp.github.io/tags/hardware/"/>
    
      <category term="network" scheme="https://decodezp.github.io/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>程序员和工厂劳工有何不同</title>
    <link href="https://decodezp.github.io/2018/11/22/programmer-worker/"/>
    <id>https://decodezp.github.io/2018/11/22/programmer-worker/</id>
    <published>2018-11-22T12:54:07.000Z</published>
    <updated>2018-11-22T13:23:21.430Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;如今流行的一个说法是，现在的程序员与工业时期的工厂工人并无二致。&lt;br&gt;均是富集于人口密集的城市、均是超时劳动、均是遭受资本家的盘剥、均是一架大机器上的螺丝钉，在超过“劳动年龄”之后被弃如敝屣。&lt;br&gt;基于这些相似点，有些人得出结论，程序员不过是这个时代的“无产阶级”，和以前的流水线工人，纺织厂女工属于同一社会分工和定位。&lt;br&gt;是否当真如此，这个问题值得仔细推敲一下。&lt;br&gt;
    
    </summary>
    
      <category term="thoughts" scheme="https://decodezp.github.io/categories/thoughts/"/>
    
    
      <category term="thoughts" scheme="https://decodezp.github.io/tags/thoughts/"/>
    
  </entry>
  
  <entry>
    <title>几句话说清楚1:为什么CPU L1缓存容量始终很小</title>
    <link href="https://decodezp.github.io/2018/11/20/cachesize/"/>
    <id>https://decodezp.github.io/2018/11/20/cachesize/</id>
    <published>2018-11-20T11:45:45.000Z</published>
    <updated>2018-11-30T06:30:55.489Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;CPU缓存是影响软件性能的关键因素之一。在做性能调优时，经常关注的一个指标就是缓存的命中率(hit rate)。&lt;br&gt;缓存之所以不会达到100%的命中率，是因为缓存容量有限，不能将内存中的全部数据都同时放入其中。只能将当前最热，相邻最近的数据存入，同时还受多核CPU中缓存同步机制的影响。&lt;br&gt;奇怪的是，CPU的制程、晶体管数量、核心数量一直都在增加，但L1缓存的容量始终维持在一个相当低的水平。为什么不加大L1缓存呢？&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
      <category term="quickwords" scheme="https://decodezp.github.io/categories/tech/quickwords/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="hardware" scheme="https://decodezp.github.io/tags/hardware/"/>
    
      <category term="CPU" scheme="https://decodezp.github.io/tags/CPU/"/>
    
  </entry>
  
  <entry>
    <title>top命令使用方法补遗</title>
    <link href="https://decodezp.github.io/2018/11/19/topcmd/"/>
    <id>https://decodezp.github.io/2018/11/19/topcmd/</id>
    <published>2018-11-19T13:25:58.000Z</published>
    <updated>2018-11-20T12:11:01.048Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;更改界面刷新频率&quot;&gt;&lt;a href=&quot;#更改界面刷新频率&quot; class=&quot;headerlink&quot; title=&quot;更改界面刷新频率&quot;&gt;&lt;/a&gt;更改界面刷新频率&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;自动刷新&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;top&lt;/code&gt;&lt;br&gt;&lt;code&gt;d&lt;/code&gt;&lt;br&gt;输入刷新时间（默认3秒，可调至0.5）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;手动刷新&lt;br&gt;空格&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
  </entry>
  
  <entry>
    <title>刚日读经，柔日读史</title>
    <link href="https://decodezp.github.io/2018/11/18/gangrirouri/"/>
    <id>https://decodezp.github.io/2018/11/18/gangrirouri/</id>
    <published>2018-11-18T11:27:23.000Z</published>
    <updated>2018-11-19T13:32:44.873Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在不知道什么时候，我们似乎被灌输了一种互补好，什么都是互补好的认知。&lt;br&gt;资源要互补，团队要互补，思想要互补，连看个书也得掐着日子互补。&lt;/p&gt;
    
    </summary>
    
      <category term="thoughts" scheme="https://decodezp.github.io/categories/thoughts/"/>
    
    
      <category term="thoughts" scheme="https://decodezp.github.io/tags/thoughts/"/>
    
  </entry>
  
  <entry>
    <title>如何在偷偷搜索关键字后避免令人尴尬的广告</title>
    <link href="https://decodezp.github.io/2018/11/17/duckduckgo/"/>
    <id>https://decodezp.github.io/2018/11/17/duckduckgo/</id>
    <published>2018-11-17T13:13:36.000Z</published>
    <updated>2018-11-18T11:48:05.706Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;转载自&lt;a href=&quot;https://cloudwonders.info&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;cloudwonders.info&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当你在任意一个搜索引擎输入一个关键词之后，你就成了全网全平台追逐的流量热点。&lt;/p&gt;
&lt;p&gt;平时大打口水战的各大平台在共享你的隐私数据方面异常团结，在B系网站搜索，在A系T系的应用APP上都会看到为你“量身定制”的推送和广告，延迟不超过一分钟。&lt;/p&gt;
    
    </summary>
    
      <category term="wonder" scheme="https://decodezp.github.io/categories/wonder/"/>
    
    
      <category term="resources" scheme="https://decodezp.github.io/tags/resources/"/>
    
      <category term="wonder" scheme="https://decodezp.github.io/tags/wonder/"/>
    
  </entry>
  
</feed>
