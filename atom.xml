<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DecodeZ</title>
  
  <subtitle>刚日读经，柔日读史</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://decodezp.github.io/"/>
  <updated>2019-03-24T13:49:11.502Z</updated>
  <id>https://decodezp.github.io/</id>
  
  <author>
    <name>Pan Zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>后凉龙骧将军吕邈教你如何一本正经胡说八道</title>
    <link href="https://decodezp.github.io/2019/03/24/history3-lvmiao/"/>
    <id>https://decodezp.github.io/2019/03/24/history3-lvmiao/</id>
    <published>2019-03-24T13:26:32.000Z</published>
    <updated>2019-03-24T13:49:11.502Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;胡说八道容易，看起来一本正经也不难，但那都是从你自己的眼光出发。&lt;/p&gt;
&lt;p&gt;让别人看起来同样一本正经就非常有挑战了，即便你真的是在一本正经。&lt;/p&gt;
    
    </summary>
    
      <category term="history" scheme="https://decodezp.github.io/categories/history/"/>
    
    
      <category term="history" scheme="https://decodezp.github.io/tags/history/"/>
    
  </entry>
  
  <entry>
    <title>商业供稿2：网络可视化如何抵御数字化转型风险</title>
    <link href="https://decodezp.github.io/2019/03/23/commerical2-visibility-digital-transform/"/>
    <id>https://decodezp.github.io/2019/03/23/commerical2-visibility-digital-transform/</id>
    <published>2019-03-23T00:41:19.000Z</published>
    <updated>2019-03-23T00:46:23.346Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;原载于云杉网络 &lt;a href=&quot;http://www.yunshan.net&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;www.yunshan.net&lt;/a&gt; 微信公众号&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;当前，“数字化转型”已成为企业或组织绕不过去的一个话题。诚然，并非所有(云杉网络的)客户都会直接声称“我们正在数字化转型”或者“我们正在做一个数字化转型的项目”，但对IT基础设施进行敏捷性改造，提升业务灵活性和效率，已是各行各业的一致追求。&lt;br&gt;
    
    </summary>
    
      <category term="commerical" scheme="https://decodezp.github.io/categories/commerical/"/>
    
    
      <category term="commerical" scheme="https://decodezp.github.io/tags/commerical/"/>
    
  </entry>
  
  <entry>
    <title>生小猫啦</title>
    <link href="https://decodezp.github.io/2019/03/20/hello-kitty/"/>
    <id>https://decodezp.github.io/2019/03/20/hello-kitty/</id>
    <published>2019-03-20T12:33:55.000Z</published>
    <updated>2019-03-20T12:35:07.521Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;去年夏天的时候家里从地铁站门口迎来了两位新成员，蓝猫derder和他的媳妇葡萄。&lt;/p&gt;
&lt;p&gt;我其实本意并不想养宠物的，毕竟从小到大除了养过两只乌龟之外，从来也没和动物有过什么亲密接触。养猫基本上都是张老师的主意，她从小就是养鸡小能手，还养过狗啊鱼啊刺猬啊这些，所以一直想在家里恢复一下她的童年记忆。&lt;br&gt;
    
    </summary>
    
      <category term="thoughts" scheme="https://decodezp.github.io/categories/thoughts/"/>
    
    
      <category term="thoughts" scheme="https://decodezp.github.io/tags/thoughts/"/>
    
  </entry>
  
  <entry>
    <title>OVS-DPDK 82599 VF初始化失败诊断方法一例</title>
    <link href="https://decodezp.github.io/2019/03/19/82599-vf-err-debug/"/>
    <id>https://decodezp.github.io/2019/03/19/82599-vf-err-debug/</id>
    <published>2019-03-19T12:55:24.000Z</published>
    <updated>2019-03-19T15:51:46.783Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;在82599上创建了两个VF之后，各自绑定到vfio，启动DPDK时出现错误：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;PMD: eth_ixgbevf_dev_init(): VF Initialization Failure: -15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;EAL: Error - exiting with code: 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Cause: Requested device 0000:01:10.0 cannot be used&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="dpdk" scheme="https://decodezp.github.io/tags/dpdk/"/>
    
  </entry>
  
  <entry>
    <title>几句话说清楚21：Skylake微架构(Microarchitecture)剖析(6)</title>
    <link href="https://decodezp.github.io/2019/03/10/quickwords21-skylake-pipeline-6/"/>
    <id>https://decodezp.github.io/2019/03/10/quickwords21-skylake-pipeline-6/</id>
    <published>2019-03-10T03:44:34.000Z</published>
    <updated>2019-03-10T03:48:45.973Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;OOO-Once-More&quot;&gt;&lt;a href=&quot;#OOO-Once-More&quot; class=&quot;headerlink&quot; title=&quot;OOO Once More&quot;&gt;&lt;/a&gt;OOO Once More&lt;/h2&gt;&lt;p&gt;这里对OOO(Out-Of-Order)乱序执行再简单讲两句。深入乱序执行的难点不在于“不按指令顺序执行”，而是如何做到“按指令顺序退出”。&lt;/p&gt;
&lt;p&gt;这里面的关键是，所有执行过的指令都先被“缓存”起来，并不把执行之后的结果真正写到寄存器或者内存里。从用户角度看，这个指令其实并没有被“执行”，因为它没有引起任何数据方面的变化。等到它可以确定是需要被执行的指令，并且它前面的指令都已经把结果写入(commit)之后，它再去Commit。这样从用户角度看来，程序就是按照指令顺序执行了。&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="hardware" scheme="https://decodezp.github.io/tags/hardware/"/>
    
      <category term="CPU" scheme="https://decodezp.github.io/tags/CPU/"/>
    
  </entry>
  
  <entry>
    <title>在控制台水平滚动</title>
    <link href="https://decodezp.github.io/2019/03/07/terminal-horizontal-scrolling/"/>
    <id>https://decodezp.github.io/2019/03/07/terminal-horizontal-scrolling/</id>
    <published>2019-03-07T13:05:17.000Z</published>
    <updated>2019-03-07T13:06:42.596Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在CLI下操作，很多时候会因为屏幕尺寸的原因导致格式化输出的字符变成一副惨不忍睹的样子。比如你在有很多CPU核的环境下打印&lt;code&gt;cat /proc/interrupts&lt;/code&gt;的时候。&lt;/p&gt;
&lt;p&gt;当然你可能有很多方式能够处理这种情形，比如使用&lt;code&gt;awk&lt;/code&gt;或者重定向到某个文件再打开。&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="linux" scheme="https://decodezp.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>商业供稿1：消除虚拟化环境网络盲点</title>
    <link href="https://decodezp.github.io/2019/03/05/commerical1-eliminate-vnet-blind-spot/"/>
    <id>https://decodezp.github.io/2019/03/05/commerical1-eliminate-vnet-blind-spot/</id>
    <published>2019-03-05T13:23:21.000Z</published>
    <updated>2019-03-23T00:45:36.061Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;原载于云杉网络 &lt;a href=&quot;http://www.yunshan.net&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;www.yunshan.net&lt;/a&gt; 微信公众号&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;网络盲点是引起虚拟化环境中业务中断、服务质量下降以及遭受安全威胁的最主要原因。当公司或组织缺乏网络可见性，无法完全掌握其虚拟化环境中业务的网络运行情况时，将必然面临频繁的业务中断、客户投诉以及恶意攻击带来的损失。据Gartner预测，到2019年，实现适当的网络可见性和控制工具的60%的企业将减少三分之一的安全故障。&lt;/p&gt;
&lt;p&gt;随着业务规模的扩大，公司和组织对网络可见性的投入亦将会持续增加。但除了购买增强网络可见性的产品和服务之外，还应针对虚拟化环境中的业务特点，从以下几个导致网络盲点的原因出发，构建完善的网络监控和安全体系。&lt;br&gt;
    
    </summary>
    
      <category term="commerical" scheme="https://decodezp.github.io/categories/commerical/"/>
    
    
      <category term="commerical" scheme="https://decodezp.github.io/tags/commerical/"/>
    
  </entry>
  
  <entry>
    <title>几句话说清楚20：eBPF的机制</title>
    <link href="https://decodezp.github.io/2019/03/01/quickwords20-ebpf-intro/"/>
    <id>https://decodezp.github.io/2019/03/01/quickwords20-ebpf-intro/</id>
    <published>2019-03-01T13:56:23.000Z</published>
    <updated>2019-03-01T14:10:14.433Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;怎么出来的eBPF&quot;&gt;&lt;a href=&quot;#怎么出来的eBPF&quot; class=&quot;headerlink&quot; title=&quot;怎么出来的eBPF&quot;&gt;&lt;/a&gt;怎么出来的eBPF&lt;/h2&gt;&lt;p&gt;用Linux Kernel Module来做一个类比说明eBPF诞生的目的。&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
  </entry>
  
  <entry>
    <title>几句话说清楚19：描述性能优化成果的正确姿势</title>
    <link href="https://decodezp.github.io/2019/02/24/quickwords19-desc-perf-improvement/"/>
    <id>https://decodezp.github.io/2019/02/24/quickwords19-desc-perf-improvement/</id>
    <published>2019-02-24T07:06:30.000Z</published>
    <updated>2019-02-24T07:09:28.413Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;从10秒到1秒&quot;&gt;&lt;a href=&quot;#从10秒到1秒&quot; class=&quot;headerlink&quot; title=&quot;从10秒到1秒&quot;&gt;&lt;/a&gt;从10秒到1秒&lt;/h2&gt;&lt;p&gt;周末了说点不硬的技术。&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
  </entry>
  
  <entry>
    <title>几句话说清楚18：PCIE带宽单位GT/s到Gbps转换方法</title>
    <link href="https://decodezp.github.io/2019/02/22/quickwords18-pcie-gtps-gbps/"/>
    <id>https://decodezp.github.io/2019/02/22/quickwords18-pcie-gtps-gbps/</id>
    <published>2019-02-22T13:41:22.000Z</published>
    <updated>2019-02-22T13:48:53.561Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;PCIE的表达方式&quot;&gt;&lt;a href=&quot;#PCIE的表达方式&quot; class=&quot;headerlink&quot; title=&quot;PCIE的表达方式&quot;&gt;&lt;/a&gt;PCIE的表达方式&lt;/h2&gt;&lt;p&gt;PCIE使用GT/s这个单位表达自己的带宽，这并不是为了标新立异，而是为了更好（直接）地表达PCIE的工作方式。&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="hardware" scheme="https://decodezp.github.io/tags/hardware/"/>
    
  </entry>
  
  <entry>
    <title>几句话说清楚17：用Makefile.am和configure.ac构建一个专业的Hello World</title>
    <link href="https://decodezp.github.io/2019/02/21/quickwords17-makefileam-configureac/"/>
    <id>https://decodezp.github.io/2019/02/21/quickwords17-makefileam-configureac/</id>
    <published>2019-02-21T12:46:35.000Z</published>
    <updated>2019-02-22T13:48:55.394Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;首先感谢GUN的良好&lt;a href=&quot;https://www.gnu.org/software/automake/manual/html_node/Creating-amhello.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;教程&lt;/a&gt;，这里主要是做一点点加工。&lt;/p&gt;
&lt;h2 id=&quot;GNU-Autotool&quot;&gt;&lt;a href=&quot;#GNU-Autotool&quot; class=&quot;headerlink&quot; title=&quot;GNU Autotool&quot;&gt;&lt;/a&gt;GNU Autotool&lt;/h2&gt;&lt;p&gt;现在写开源项目，如果只提供一个Makefile可能会令别人怀疑你项目的专业程度:D虽然其实并没有什么关系，但看着别的项目目录下面的&lt;code&gt;configure&lt;/code&gt;, &lt;code&gt;configure.ac&lt;/code&gt;, &lt;code&gt;Makefile.in&lt;/code&gt;, &lt;code&gt;Makefile.am&lt;/code&gt;, &lt;code&gt;aclocal.m4&lt;/code&gt;等文件还是会觉得有必要也用这些东西“装点”一下。&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="program" scheme="https://decodezp.github.io/tags/program/"/>
    
  </entry>
  
  <entry>
    <title>几句话说清楚16：如何构建零干扰CPU Benchmark环境</title>
    <link href="https://decodezp.github.io/2019/02/20/quickwords16-noisy-free-benchmark-env/"/>
    <id>https://decodezp.github.io/2019/02/20/quickwords16-noisy-free-benchmark-env/</id>
    <published>2019-02-20T13:07:28.000Z</published>
    <updated>2019-02-20T13:09:10.002Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CPU性能测试对环境的要求&quot;&gt;&lt;a href=&quot;#CPU性能测试对环境的要求&quot; class=&quot;headerlink&quot; title=&quot;CPU性能测试对环境的要求&quot;&gt;&lt;/a&gt;CPU性能测试对环境的要求&lt;/h2&gt;&lt;p&gt;即便是硬件配置完全一样，操作系统相同，工作负载也相同的硬件平台，性能测试的结果也可能会因为各项配置的不同出现较大出入。&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="CPU" scheme="https://decodezp.github.io/tags/CPU/"/>
    
  </entry>
  
  <entry>
    <title>测来测去7：筛法求素数Loop Unrolling性能优化实例</title>
    <link href="https://decodezp.github.io/2019/02/19/test7-prime-opt/"/>
    <id>https://decodezp.github.io/2019/02/19/test7-prime-opt/</id>
    <published>2019-02-19T11:57:18.000Z</published>
    <updated>2019-02-19T11:58:59.312Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;筛法求素数&quot;&gt;&lt;a href=&quot;#筛法求素数&quot; class=&quot;headerlink&quot; title=&quot;筛法求素数&quot;&gt;&lt;/a&gt;筛法求素数&lt;/h2&gt;&lt;p&gt;最近拿到一段筛法求素数的代码，希望能够在不改变原有算法的基础上提高性能。&lt;br&gt;
    
    </summary>
    
      <category term="test" scheme="https://decodezp.github.io/categories/test/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="CPU" scheme="https://decodezp.github.io/tags/CPU/"/>
    
      <category term="performance" scheme="https://decodezp.github.io/tags/performance/"/>
    
      <category term="test" scheme="https://decodezp.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>《居家男人》</title>
    <link href="https://decodezp.github.io/2019/02/15/thoughts5-family-man/"/>
    <id>https://decodezp.github.io/2019/02/15/thoughts5-family-man/</id>
    <published>2019-02-15T11:02:39.000Z</published>
    <updated>2019-02-15T11:24:35.920Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;大约在2010年左右的时候，我会经常在PPS这种视频流软件上面看尼古拉斯凯奇的电影。他早期的一些作品还是令人印象深刻。相较于那些有名的动作片，《居家男人》应该只是一部家庭剧小品，但却成了我这些年重复播放最多的他的片子。&lt;br&gt;
    
    </summary>
    
      <category term="thoughts" scheme="https://decodezp.github.io/categories/thoughts/"/>
    
    
      <category term="thoughts" scheme="https://decodezp.github.io/tags/thoughts/"/>
    
  </entry>
  
  <entry>
    <title>几句话说清楚15：Top-Down性能分析方法资料及Toplev使用</title>
    <link href="https://decodezp.github.io/2019/02/14/quickwords15-toplev/"/>
    <id>https://decodezp.github.io/2019/02/14/quickwords15-toplev/</id>
    <published>2019-02-14T11:40:58.000Z</published>
    <updated>2019-02-14T11:42:33.035Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Top-down-Microarchitecture-Analysis-Method-TMAM-资料&quot;&gt;&lt;a href=&quot;#Top-down-Microarchitecture-Analysis-Method-TMAM-资料&quot; class=&quot;headerlink&quot; title=&quot;Top-down Microarchitecture Analysis Method(TMAM)资料&quot;&gt;&lt;/a&gt;Top-down Microarchitecture Analysis Method(TMAM)资料&lt;/h2&gt;&lt;p&gt;之前介绍过TMAM的具体内容，在这里对网络上相关的信息和资料做一个汇总：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://software.intel.com/en-us/vtune-amplifier-help-tuning-applications-using-a-top-down-microarchitecture-analysis-method&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Tuning Applications Using a Top-down Microarchitecture Analysis Method&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="hardware" scheme="https://decodezp.github.io/tags/hardware/"/>
    
      <category term="CPU" scheme="https://decodezp.github.io/tags/CPU/"/>
    
  </entry>
  
  <entry>
    <title>几句话说清楚14：Skylake微架构(Microarchitecture)剖析(5)</title>
    <link href="https://decodezp.github.io/2019/02/03/quickwords14-skylake-pipeline-5/"/>
    <id>https://decodezp.github.io/2019/02/03/quickwords14-skylake-pipeline-5/</id>
    <published>2019-02-03T07:42:55.000Z</published>
    <updated>2019-02-03T07:44:13.811Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Instruction-Decode-Queue-IDQ&quot;&gt;&lt;a href=&quot;#Instruction-Decode-Queue-IDQ&quot; class=&quot;headerlink&quot; title=&quot;Instruction Decode Queue(IDQ)&quot;&gt;&lt;/a&gt;Instruction Decode Queue(IDQ)&lt;/h2&gt;&lt;p&gt;IDQ也叫Allocation Queue(AQ)，也有时候会写成是Decode Queue。解码完成的uops在进入后端之前需要先在IDQ中做一下缓冲。作为一个”缓冲队列”，主要作用是将前端解码可能引入的流水线”气泡(bubbles)“消化掉，为后端提供稳定的uops供应(目标是6uop/cycle)。&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="hardware" scheme="https://decodezp.github.io/tags/hardware/"/>
    
      <category term="CPU" scheme="https://decodezp.github.io/tags/CPU/"/>
    
  </entry>
  
  <entry>
    <title>程序员学英语的几点实用经验</title>
    <link href="https://decodezp.github.io/2019/01/31/how-to-learn-english/"/>
    <id>https://decodezp.github.io/2019/01/31/how-to-learn-english/</id>
    <published>2019-01-31T12:47:03.000Z</published>
    <updated>2019-01-31T12:49:20.096Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;学习英语当然要靠不断的练习，但同样的练习时间往往效果却大相径庭。以下是我结合自己的经历总结的一些经验和方法，希望能帮助大家提高学习英语的效率。&lt;/p&gt;
&lt;h2 id=&quot;Rubbish-in-rubbish-out&quot;&gt;&lt;a href=&quot;#Rubbish-in-rubbish-out&quot; class=&quot;headerlink&quot; title=&quot;Rubbish in, rubbish out&quot;&gt;&lt;/a&gt;Rubbish in, rubbish out&lt;/h2&gt;&lt;p&gt;把自己想象成一个处理英文的黑盒，输入就是听读，输出就是说写。和人工智能训练模型需要优质的标签数据一样，学习英语也需要优质的输入才能达到良好的学习效果。&lt;/p&gt;
&lt;p&gt;在程序员的领域，最直接的优质的英文材料就是经典的英文原版技术书籍。编写这些书籍的大师不但是技术领域的巨擘，同时也是操纵语言的大师，他们的书籍往往最是简洁明快，逻辑清晰。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>几句话说清楚13：什么是Top-Down性能分析方法</title>
    <link href="https://decodezp.github.io/2019/01/27/quickwords13-tma/"/>
    <id>https://decodezp.github.io/2019/01/27/quickwords13-tma/</id>
    <published>2019-01-27T13:17:45.000Z</published>
    <updated>2019-01-27T13:29:03.211Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目的&quot;&gt;&lt;a href=&quot;#目的&quot; class=&quot;headerlink&quot; title=&quot;目的&quot;&gt;&lt;/a&gt;目的&lt;/h2&gt;&lt;p&gt;前几篇连续介绍了一些Skylake微架构的内容（还没有结束，还会继续填坑），主要目的并不是要对读者开启名词或者概念的Flood攻击，而是为了方便读者以后可以“有理有据”地进行软件的性能优化。&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="hardware" scheme="https://decodezp.github.io/tags/hardware/"/>
    
      <category term="CPU" scheme="https://decodezp.github.io/tags/CPU/"/>
    
  </entry>
  
  <entry>
    <title>测来测去6：Linux网络性能调优方法（补遗）</title>
    <link href="https://decodezp.github.io/2019/01/24/test6-linux-network-performance-optimization-2/"/>
    <id>https://decodezp.github.io/2019/01/24/test6-linux-network-performance-optimization-2/</id>
    <published>2019-01-24T10:35:31.000Z</published>
    <updated>2019-01-24T10:36:53.721Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;没提到的&quot;&gt;&lt;a href=&quot;#没提到的&quot; class=&quot;headerlink&quot; title=&quot;没提到的&quot;&gt;&lt;/a&gt;没提到的&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://decodezp.github.io/2019/01/22/test5-linux-network-performance-optimization/&quot;&gt;上一篇&lt;/a&gt;内容中介绍了一些Linux网络协议栈的调优方法，但遗漏了一些可以发挥重要作用的方法，在这一篇中补充一下。&lt;br&gt;
    
    </summary>
    
      <category term="test" scheme="https://decodezp.github.io/categories/test/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="network" scheme="https://decodezp.github.io/tags/network/"/>
    
      <category term="performance" scheme="https://decodezp.github.io/tags/performance/"/>
    
      <category term="test" scheme="https://decodezp.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>测来测去5：Linux网络性能调优方法</title>
    <link href="https://decodezp.github.io/2019/01/22/test5-linux-network-performance-optimization/"/>
    <id>https://decodezp.github.io/2019/01/22/test5-linux-network-performance-optimization/</id>
    <published>2019-01-22T13:06:06.000Z</published>
    <updated>2019-01-22T13:21:27.637Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;换换口味&quot;&gt;&lt;a href=&quot;#换换口味&quot; class=&quot;headerlink&quot; title=&quot;换换口味&quot;&gt;&lt;/a&gt;换换口味&lt;/h2&gt;&lt;p&gt;老搞DPDK的人有一个毛病就是怎么也看不上内核网络，又是中断又是拷贝的，实在没有一脚地板油CPU直接100%炸街来得爽快。另外作为一个软件性能优化的“硬核”玩家，是很看不上内核这种改改参数，调调设置的玩法的。不过…既然自己主动跳了个大坑，该调内核性能的时候还是要调的…所以今天就换换口味，看看在Linux下通过配置调优网络性能怎么搞。&lt;/p&gt;
    
    </summary>
    
      <category term="test" scheme="https://decodezp.github.io/categories/test/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="network" scheme="https://decodezp.github.io/tags/network/"/>
    
      <category term="performance" scheme="https://decodezp.github.io/tags/performance/"/>
    
      <category term="test" scheme="https://decodezp.github.io/tags/test/"/>
    
  </entry>
  
</feed>
