<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DecodeZ</title>
  
  <subtitle>刚日读经，柔日读史</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://decodezp.github.io/"/>
  <updated>2018-12-25T09:23:59.044Z</updated>
  <id>https://decodezp.github.io/</id>
  
  <author>
    <name>Pan Zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>几句话说清楚8：Intel 700系列网卡内部结构概览</title>
    <link href="https://decodezp.github.io/2018/12/25/quickwords8-700-nic-arch/"/>
    <id>https://decodezp.github.io/2018/12/25/quickwords8-700-nic-arch/</id>
    <published>2018-12-25T09:17:39.000Z</published>
    <updated>2018-12-25T09:23:59.044Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;一不小心这个系列写到了第8期，原本打算写些别的东西，不过看到8这个数字就想到了Intel将要推出的800系列网卡…的小弟——命途多舛的700系列网卡。从目前市场(主要是云计算、互联网公司和数据中心)的情况看，700系列有逐渐推广的趋势，那么这一期就介绍一下700系列网卡的基本技术架构和特点吧。&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="hardware" scheme="https://decodezp.github.io/tags/hardware/"/>
    
      <category term="network" scheme="https://decodezp.github.io/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>几句话说清楚7：DPDK不同CPU平台交叉编译指令不支持的问题</title>
    <link href="https://decodezp.github.io/2018/12/24/quickwords7-dpdk-cross-compile/"/>
    <id>https://decodezp.github.io/2018/12/24/quickwords7-dpdk-cross-compile/</id>
    <published>2018-12-24T13:06:12.000Z</published>
    <updated>2018-12-24T13:11:48.307Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;headerlink&quot; title=&quot;现象&quot;&gt;&lt;/a&gt;现象&lt;/h2&gt;&lt;p&gt;在比较高级的CPU平台(比如skylake)编译DPDK，会在编译的目标文件中加入一些高级指令集中的指令，比如AVX512。&lt;/p&gt;
&lt;p&gt;如果运行最终可执行文件的机器的CPU架构(比如broadwell)不支持编译机器中的指令，则会在执行时报类似这种错误：&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
      <category term="quickwords" scheme="https://decodezp.github.io/categories/tech/quickwords/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="dpdk" scheme="https://decodezp.github.io/tags/dpdk/"/>
    
  </entry>
  
  <entry>
    <title>5分钟经典英文技术演讲2：软件设计真正的精髓-Scott Meyer</title>
    <link href="https://decodezp.github.io/2018/12/21/eng-talk2-things-matter/"/>
    <id>https://decodezp.github.io/2018/12/21/eng-talk2-things-matter/</id>
    <published>2018-12-21T13:07:58.000Z</published>
    <updated>2018-12-21T13:20:43.840Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一个人的能力上限很大程度上取决于他获取信息的能力。&lt;/p&gt;
&lt;p&gt;而能力增长的速度与获取信息的_质量_正相关。&lt;/p&gt;
&lt;p&gt;不可否认，大量优质的技术内容都基于英文。“5分钟经典英文技术演讲”专门撷取国外最有价值的纯英文技术演讲，以最精炼的形式将信息传达给国内的技术同侪，绕过网络政策和语言的障碍，实现中西方技术世界无壁垒的信息同步。&lt;/p&gt;
&lt;p&gt;最新内容将发布于&lt;a href=&quot;https://decodezp.github.io&quot;&gt;DecodeZ&lt;/a&gt;: &lt;a href=&quot;https://decodezp.github.io&quot;&gt;https://decodezp.github.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://decodezp.github.io/2018/12/12/eng-talk1-fast-learn/&quot;&gt;往期回顾：如何快速掌握新技术&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;DConf2017：软件设计真正的精髓&quot;&gt;&lt;a href=&quot;#DConf2017：软件设计真正的精髓&quot; class=&quot;headerlink&quot; title=&quot;DConf2017：软件设计真正的精髓&quot;&gt;&lt;/a&gt;DConf2017：软件设计真正的精髓&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=RT46MpK39rQ&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原视频&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://dconf.org/2017/talks/meyers.pptx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PPT/Slides下载&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;演讲者：Scott Meyer&lt;/p&gt;
&lt;p&gt;上一张演讲者的照片，硬撸过C++的应该都很熟悉他:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2018/12/21/FsMA2R.jpg&quot; alt=&quot;Scott Meyer&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;摘要：成功的软件产品都有其共性。在Scott Meyer看来，这些共性由几个要素组成。在你的作品中考虑这些要素，将帮助你掌握软件设计真正的精髓。&lt;br&gt;
    
    </summary>
    
      <category term="ENG_talk" scheme="https://decodezp.github.io/categories/ENG-talk/"/>
    
    
      <category term="English" scheme="https://decodezp.github.io/tags/English/"/>
    
      <category term="Presentation" scheme="https://decodezp.github.io/tags/Presentation/"/>
    
  </entry>
  
  <entry>
    <title>几句话说清楚6：什么是DDP(Dynamic Device Personalization)</title>
    <link href="https://decodezp.github.io/2018/12/18/quickwords6-ddp/"/>
    <id>https://decodezp.github.io/2018/12/18/quickwords6-ddp/</id>
    <published>2018-12-18T12:25:40.000Z</published>
    <updated>2018-12-18T12:28:33.598Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;要解决的问题&quot;&gt;&lt;a href=&quot;#要解决的问题&quot; class=&quot;headerlink&quot; title=&quot;要解决的问题&quot;&gt;&lt;/a&gt;要解决的问题&lt;/h2&gt;&lt;p&gt;通过网卡的多队列和RSS将网包根据一些关键字段散列(hash)到不同的队列已成为一种主流的在x86平台开发信通以及云计算领域产品的方式。&lt;/p&gt;
&lt;p&gt;在整体产品架构规划中，不同的网卡队列(Rx/Tx Queues)往往对应/绑定着不同的CPU核(Worker)，以利用资源隔离的方式提高性能。&lt;/p&gt;
&lt;p&gt;传统的RSS，往往是依据header的五元组来做散列。通常，网卡可以识别出的报文类型包括&lt;code&gt;ipv4-tcp|ipv4-udp|ipv4-other|ipv6-tcp|l2-payload&lt;/code&gt;等等，然后根据能识别出的类型进行关键字段的提取。&lt;/p&gt;
&lt;p&gt;但现在如此简单的识别能力已经不能满足业务的需求。在复杂的协议和隧道通讯场景下，往往还需要识别隧道内层header甚至私有字段才能实现业务能力的最优化。&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="hardware" scheme="https://decodezp.github.io/tags/hardware/"/>
    
      <category term="network" scheme="https://decodezp.github.io/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>谁不是在像CPU一样活着</title>
    <link href="https://decodezp.github.io/2018/12/16/cpulized-life/"/>
    <id>https://decodezp.github.io/2018/12/16/cpulized-life/</id>
    <published>2018-12-16T10:06:40.000Z</published>
    <updated>2018-12-16T10:12:04.758Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;上一次兴奋到浑身发热，还是把赛扬300A超频到450兆赫的时候。身体如摩尔定律般长高，觉得距离1GHz只差一罐液氮，心里装着只有一心一意才能装下的事情。&lt;/p&gt;
&lt;p&gt;记得那时看到一篇报道，英特尔说“到2011年的时候，我们都能用上10GHz的电脑”。十几岁的你笑这家美国公司野心不大，现在你说出这件事，只是想给大家讲个笑话。&lt;br&gt;
    
    </summary>
    
      <category term="thoughts" scheme="https://decodezp.github.io/categories/thoughts/"/>
    
    
      <category term="thoughts" scheme="https://decodezp.github.io/tags/thoughts/"/>
    
  </entry>
  
  <entry>
    <title>几句话说清楚5：影响服务器内存性能的硬件知识</title>
    <link href="https://decodezp.github.io/2018/12/13/quickwords5-server-memory/"/>
    <id>https://decodezp.github.io/2018/12/13/quickwords5-server-memory/</id>
    <published>2018-12-13T14:20:51.000Z</published>
    <updated>2018-12-13T14:38:25.712Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;发挥内存条理财的最大收益率&quot;&gt;&lt;a href=&quot;#发挥内存条理财的最大收益率&quot; class=&quot;headerlink&quot; title=&quot;发挥内存条理财的最大收益率&quot;&gt;&lt;/a&gt;发挥内存条理财的最大收益率&lt;/h2&gt;&lt;p&gt;内存条作为年度最佳理财产品除了能躺着赚钱之外，使用得好还可以一条当两条用。&lt;/p&gt;
&lt;p&gt;在计算机系统中，内存的价值就体现在快速提供数据给CPU处理。当CPU需要的数据没有在缓存里时，CPU内部的&lt;code&gt;Memory Controller&lt;/code&gt;就需要去内存中读取内容。&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
      <category term="quickwords" scheme="https://decodezp.github.io/categories/tech/quickwords/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="hardware" scheme="https://decodezp.github.io/tags/hardware/"/>
    
      <category term="performance" scheme="https://decodezp.github.io/tags/performance/"/>
    
      <category term="memory" scheme="https://decodezp.github.io/tags/memory/"/>
    
  </entry>
  
  <entry>
    <title>5分钟经典英文技术演讲1：如何快速掌握新技术 - Kathy Sierra</title>
    <link href="https://decodezp.github.io/2018/12/12/eng-talk1-fast-learn/"/>
    <id>https://decodezp.github.io/2018/12/12/eng-talk1-fast-learn/</id>
    <published>2018-12-12T14:51:14.000Z</published>
    <updated>2018-12-12T15:09:49.362Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一个人的能力上限很大程度上取决于他获取信息的能力。&lt;/p&gt;
&lt;p&gt;而能力增长的速度与获取信息的质量正相关。&lt;/p&gt;
&lt;p&gt;不可否认，大量优质的技术内容都基于英文。“5分钟经典英文技术演讲”专门撷取国外最有价值的纯英文技术演讲，以最精炼的形式将信息传达给国内的技术同侪，绕过网络政策和语言的障碍，实现中西方技术世界无壁垒的信息同步。&lt;/p&gt;
&lt;p&gt;最新内容将发布于DecodeZ: decodezp.github.io&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Fluent-如何快速掌握新技术&quot;&gt;&lt;a href=&quot;#Fluent-如何快速掌握新技术&quot; class=&quot;headerlink&quot; title=&quot;Fluent: 如何快速掌握新技术&quot;&gt;&lt;/a&gt;Fluent: 如何快速掌握新技术&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=FKTxC9pl-WM&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原视频&lt;/a&gt;&lt;br&gt;演讲者: Kathy Sierra&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;摘要：无论是谁，以有限的精力来面对层出不穷的新技术挑战都是不够的。你需要学会一套方法论来帮助你快速习得新的技能。而快速学习的秘诀却还不止这些…&lt;br&gt;
    
    </summary>
    
      <category term="ENG_talk" scheme="https://decodezp.github.io/categories/ENG-talk/"/>
    
    
      <category term="English" scheme="https://decodezp.github.io/tags/English/"/>
    
      <category term="Presentation" scheme="https://decodezp.github.io/tags/Presentation/"/>
    
  </entry>
  
  <entry>
    <title>几句话说清楚4：什么是Pointer Aliasing</title>
    <link href="https://decodezp.github.io/2018/12/11/quickwords4-pointer-aliasing/"/>
    <id>https://decodezp.github.io/2018/12/11/quickwords4-pointer-aliasing/</id>
    <published>2018-12-11T11:33:46.000Z</published>
    <updated>2018-12-11T11:45:43.584Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;指向同一地址的两个相同类型的指针&quot;&gt;&lt;a href=&quot;#指向同一地址的两个相同类型的指针&quot; class=&quot;headerlink&quot; title=&quot;指向同一地址的两个相同类型的指针&quot;&gt;&lt;/a&gt;指向同一地址的两个相同类型的指针&lt;/h2&gt;&lt;p&gt;&lt;code&gt;aliasing&lt;/code&gt;本身是一个信号处理方面的概念。是指在信号采样过程中，不同的信号不再能相互区分的现象。&lt;/p&gt;
&lt;p&gt;如下图所示的波纹现象，相对于拍摄的采样频率（横纵像素分辨率），墙砖缝隙变化的频率要大于采样频率。或者换句话说，多条墙砖缝隙需要挤在一个像素里面。&lt;br&gt;&lt;img src=&quot;https://svi.nl/wikiimg/StFargeaux_kasteel_buiten1_aliased.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
      <category term="quickwords" scheme="https://decodezp.github.io/categories/tech/quickwords/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="CPU" scheme="https://decodezp.github.io/tags/CPU/"/>
    
      <category term="performance" scheme="https://decodezp.github.io/tags/performance/"/>
    
  </entry>
  
  <entry>
    <title>产品观察1：华为FabricInsight产品简要分析</title>
    <link href="https://decodezp.github.io/2018/12/08/product1-huawei-fabricinsight/"/>
    <id>https://decodezp.github.io/2018/12/08/product1-huawei-fabricinsight/</id>
    <published>2018-12-07T22:26:24.000Z</published>
    <updated>2018-12-07T22:38:54.500Z</updated>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;最近机缘巧合之下接触到了华为FabricInsight这款产品，简要谈谈看法。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;只针对2018年8月份左右发布的版本。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;另外注意，在Google搜索相关资料的时候，记得要把Fabric Insight这两个单词合并在一起搜索，中间不要加空格，别问我怎么知道的。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
      <category term="product" scheme="https://decodezp.github.io/categories/tech/product/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="product" scheme="https://decodezp.github.io/tags/product/"/>
    
      <category term="network" scheme="https://decodezp.github.io/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>可以预测交通路况的 APP</title>
    <link href="https://decodezp.github.io/2018/12/06/life-traffic-prediction/"/>
    <id>https://decodezp.github.io/2018/12/06/life-traffic-prediction/</id>
    <published>2018-12-06T06:41:18.000Z</published>
    <updated>2018-12-06T06:45:25.440Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;能不能有这样一款应用&lt;br&gt;
    
    </summary>
    
      <category term="life" scheme="https://decodezp.github.io/categories/life/"/>
    
    
      <category term="life" scheme="https://decodezp.github.io/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>测来测去2：CPU缓存读入策略</title>
    <link href="https://decodezp.github.io/2018/12/06/test2-cache-line-alignment/"/>
    <id>https://decodezp.github.io/2018/12/06/test2-cache-line-alignment/</id>
    <published>2018-12-06T06:18:31.000Z</published>
    <updated>2018-12-06T06:29:21.926Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;到底哪些数据写入了CPU缓存&quot;&gt;&lt;a href=&quot;#到底哪些数据写入了CPU缓存&quot; class=&quot;headerlink&quot; title=&quot;到底哪些数据写入了CPU缓存&quot;&gt;&lt;/a&gt;到底哪些数据写入了CPU缓存&lt;/h2&gt;&lt;p&gt;我们知道CPU会在要读写某个数据时，先将数据写入缓存。&lt;/p&gt;
&lt;p&gt;我们也知道这个操作一般以Cache Line为操作粒度，并且Cache Line的长度一般为64Byte。&lt;br&gt;
    
    </summary>
    
      <category term="test" scheme="https://decodezp.github.io/categories/test/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="hardware" scheme="https://decodezp.github.io/tags/hardware/"/>
    
      <category term="CPU" scheme="https://decodezp.github.io/tags/CPU/"/>
    
      <category term="test" scheme="https://decodezp.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>魏孝文帝教你提proposal</title>
    <link href="https://decodezp.github.io/2018/12/05/history-tuobahong/"/>
    <id>https://decodezp.github.io/2018/12/05/history-tuobahong/</id>
    <published>2018-12-05T07:09:12.000Z</published>
    <updated>2018-12-05T07:14:40.277Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;艰难的Proposal&quot;&gt;&lt;a href=&quot;#艰难的Proposal&quot; class=&quot;headerlink&quot; title=&quot;艰难的Proposal&quot;&gt;&lt;/a&gt;艰难的Proposal&lt;/h2&gt;&lt;p&gt;每个人都有独自一人面对全世界的时候，即便你是魏孝文帝拓跋宏。&lt;/p&gt;
&lt;p&gt;北魏太和十七年，承平日久的北魏都城里正在酝酿一件大事——迁都。&lt;br&gt;
    
    </summary>
    
      <category term="history" scheme="https://decodezp.github.io/categories/history/"/>
    
    
      <category term="history" scheme="https://decodezp.github.io/tags/history/"/>
    
  </entry>
  
  <entry>
    <title>ftrace uprobe使用填坑历程</title>
    <link href="https://decodezp.github.io/2018/12/04/ftrace-uprobe/"/>
    <id>https://decodezp.github.io/2018/12/04/ftrace-uprobe/</id>
    <published>2018-12-04T04:25:59.000Z</published>
    <updated>2018-12-04T04:28:56.558Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h2&gt;&lt;p&gt;打算用一下&lt;code&gt;ftrace&lt;/code&gt;对用户态程序的trace支持。&lt;/p&gt;
&lt;h3 id=&quot;测试用程序test-c：&quot;&gt;&lt;a href=&quot;#测试用程序test-c：&quot; class=&quot;headerlink&quot; title=&quot;测试用程序test.c：&quot;&gt;&lt;/a&gt;测试用程序&lt;code&gt;test.c&lt;/code&gt;：&lt;/h3&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="ftrace" scheme="https://decodezp.github.io/tags/ftrace/"/>
    
  </entry>
  
  <entry>
    <title>ftrace trace-cmd kernelshark资料汇总</title>
    <link href="https://decodezp.github.io/2018/11/30/ftrace/"/>
    <id>https://decodezp.github.io/2018/11/30/ftrace/</id>
    <published>2018-11-30T06:22:55.000Z</published>
    <updated>2018-11-30T06:39:04.849Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;一些关于这一类技术的资料和文档汇总。&lt;br&gt;文章中可以找到比较详细的工具使用方法。如果想了解更多内容可以阅读&lt;code&gt;linux/Documentation/trace&lt;/code&gt;下的文档以及源码。&lt;/p&gt;
&lt;p&gt;以及&lt;code&gt;git log ./kernel/trace&lt;/code&gt; :)&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
      <category term="linux" scheme="https://decodezp.github.io/categories/tech/linux/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="ftrace" scheme="https://decodezp.github.io/tags/ftrace/"/>
    
      <category term="linux" scheme="https://decodezp.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>测来测去1：DPDK no-huge模式性能对比测试</title>
    <link href="https://decodezp.github.io/2018/11/29/test1-dpdk-no-huge/"/>
    <id>https://decodezp.github.io/2018/11/29/test1-dpdk-no-huge/</id>
    <published>2018-11-29T05:20:58.000Z</published>
    <updated>2018-11-29T05:30:48.738Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;no-huge&quot;&gt;&lt;a href=&quot;#no-huge&quot; class=&quot;headerlink&quot; title=&quot;no-huge&quot;&gt;&lt;/a&gt;no-huge&lt;/h2&gt;&lt;p&gt;DPDK使用大页内存作为性能优化的一个手段。但大页内存在云计算等环境下可能会出现内存资源浪费的情况，作为售卖资源的云服务商，希望能找到更充分的内存资源利用的方法。在此背景下，DPDK引入了no-huge机制，即不使用hugepage，从而解放更多的系统资源。&lt;/p&gt;
&lt;p&gt;那么这种配置下DPDK性能会下降多少呢？还是需要实际定量测试一下。&lt;br&gt;
    
    </summary>
    
      <category term="test" scheme="https://decodezp.github.io/categories/test/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="dpdk" scheme="https://decodezp.github.io/tags/dpdk/"/>
    
      <category term="test" scheme="https://decodezp.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>云计算的发展需要向社区街道管理看齐</title>
    <link href="https://decodezp.github.io/2018/11/28/thoughts1-cloud-community/"/>
    <id>https://decodezp.github.io/2018/11/28/thoughts1-cloud-community/</id>
    <published>2018-11-28T05:47:57.000Z</published>
    <updated>2018-11-28T05:53:19.517Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;服务&quot;&gt;&lt;a href=&quot;#服务&quot; class=&quot;headerlink&quot; title=&quot;服务&quot;&gt;&lt;/a&gt;服务&lt;/h2&gt;&lt;p&gt;云计算本质上是一种服务。由各种不同的组件为租户提供计算、网络和存储服务。&lt;/p&gt;
&lt;p&gt;用户对这些服务的要求除了功能之外，还有安全性、可用性、性能、成本、迁移难度、SLA等一系列要求。&lt;/p&gt;
&lt;p&gt;与之类比，社区街道作为一个完整的功能单元，各个基层职能部门，也为社区内的居民提供各类生活服务。&lt;/p&gt;
&lt;p&gt;如何做好基层工作，是需要费一番脑筋的。&lt;br&gt;
    
    </summary>
    
      <category term="thoughts" scheme="https://decodezp.github.io/categories/thoughts/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="thoughts" scheme="https://decodezp.github.io/tags/thoughts/"/>
    
      <category term="cloud" scheme="https://decodezp.github.io/tags/cloud/"/>
    
  </entry>
  
  <entry>
    <title>几句话说清楚3:什么是False Sharing</title>
    <link href="https://decodezp.github.io/2018/11/27/quickwords3-falsesharing/"/>
    <id>https://decodezp.github.io/2018/11/27/quickwords3-falsesharing/</id>
    <published>2018-11-27T05:12:54.000Z</published>
    <updated>2018-11-27T05:22:37.184Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;不用图&quot;&gt;&lt;a href=&quot;#不用图&quot; class=&quot;headerlink&quot; title=&quot;不用图&quot;&gt;&lt;/a&gt;不用图&lt;/h2&gt;&lt;p&gt;以为又要见到那几张网上已经用烂了的图了是不是？这次我们不用图来讲这个事。&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
      <category term="quickwords" scheme="https://decodezp.github.io/categories/tech/quickwords/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="hardware" scheme="https://decodezp.github.io/tags/hardware/"/>
    
      <category term="CPU" scheme="https://decodezp.github.io/tags/CPU/"/>
    
  </entry>
  
  <entry>
    <title>几句话说清楚2:CPU缓存的组织形式</title>
    <link href="https://decodezp.github.io/2018/11/25/quickwords2-cacheassociativity/"/>
    <id>https://decodezp.github.io/2018/11/25/quickwords2-cacheassociativity/</id>
    <published>2018-11-25T07:18:27.000Z</published>
    <updated>2018-12-24T13:11:50.490Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;缓存&quot;&gt;&lt;a href=&quot;#缓存&quot; class=&quot;headerlink&quot; title=&quot;缓存&quot;&gt;&lt;/a&gt;缓存&lt;/h2&gt;&lt;p&gt;缓存和其他存储形式在功能形式上没有太大区别，均是输入一个地址，还你一个数据。但作为一个缓存，要考虑如何在有限的容量下保证较高的命中率以及查找效率(&lt;a href=&quot;https://decodezp.github.io/2018/11/20/cachesize/&quot;&gt;相关阅读&lt;/a&gt;)。这个问题从本质上来说，就是如何建立缓存地址与内存地址的映射关系。&lt;/p&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
      <category term="quickwords" scheme="https://decodezp.github.io/categories/tech/quickwords/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="hardware" scheme="https://decodezp.github.io/tags/hardware/"/>
    
      <category term="CPU" scheme="https://decodezp.github.io/tags/CPU/"/>
    
  </entry>
  
  <entry>
    <title>XXV710网卡Target Link Speed探秘</title>
    <link href="https://decodezp.github.io/2018/11/23/x710-target-link-speed/"/>
    <id>https://decodezp.github.io/2018/11/23/x710-target-link-speed/</id>
    <published>2018-11-23T11:26:48.000Z</published>
    <updated>2018-12-18T12:26:57.396Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;发现&quot;&gt;&lt;a href=&quot;#发现&quot; class=&quot;headerlink&quot; title=&quot;发现&quot;&gt;&lt;/a&gt;发现&lt;/h2&gt;&lt;p&gt;用lspci指令查看PCIe设备，特别是网卡设备经常会查看LnkCap及LnkSta字段，以确保网卡运行在期望的PCIe总线类型/带宽上，从而保证网卡的性能。&lt;/p&gt;
&lt;p&gt;最近拿到一块XXV710-DA2，插上之后简单看了一下状态。LnkCap和LnkSta均显示为Speed 8GT/s，Width x8，没太大问题。这时候无意中瞥见LnkCtl2中Target Link Speed显示为2.5GT/s，引发了兴趣。&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="hardware" scheme="https://decodezp.github.io/tags/hardware/"/>
    
      <category term="network" scheme="https://decodezp.github.io/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>程序员和工厂劳工有何不同</title>
    <link href="https://decodezp.github.io/2018/11/22/programmer-worker/"/>
    <id>https://decodezp.github.io/2018/11/22/programmer-worker/</id>
    <published>2018-11-22T12:54:07.000Z</published>
    <updated>2018-11-22T13:23:21.430Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;如今流行的一个说法是，现在的程序员与工业时期的工厂工人并无二致。&lt;br&gt;均是富集于人口密集的城市、均是超时劳动、均是遭受资本家的盘剥、均是一架大机器上的螺丝钉，在超过“劳动年龄”之后被弃如敝屣。&lt;br&gt;基于这些相似点，有些人得出结论，程序员不过是这个时代的“无产阶级”，和以前的流水线工人，纺织厂女工属于同一社会分工和定位。&lt;br&gt;是否当真如此，这个问题值得仔细推敲一下。&lt;br&gt;
    
    </summary>
    
      <category term="thoughts" scheme="https://decodezp.github.io/categories/thoughts/"/>
    
    
      <category term="thoughts" scheme="https://decodezp.github.io/tags/thoughts/"/>
    
  </entry>
  
</feed>
