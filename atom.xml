<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DecodeZ</title>
  
  <subtitle>刚日读经，柔日读史</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://decodezp.github.io/"/>
  <updated>2019-04-22T04:52:22.963Z</updated>
  <id>https://decodezp.github.io/</id>
  
  <author>
    <name>Pan Zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>测来测去8：公有云实例性能实际波动情况</title>
    <link href="https://decodezp.github.io/2019/04/22/test8-cloud-vm-performance/"/>
    <id>https://decodezp.github.io/2019/04/22/test8-cloud-vm-performance/</id>
    <published>2019-04-22T04:49:27.000Z</published>
    <updated>2019-04-22T04:52:22.963Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;公有云作为一种资源打包整合再售卖的商业模式，不可避免地存在多租户共享资源的情况。除了安全问题之外，更多的是需要辨别这种共享对用户各自的性能存在多大的影响。这种影响不仅仅表现在性能的下降，而更多的是表现为性能的不一致：在高峰时段和空闲时段，性能出现较大的波动。&lt;br&gt;
    
    </summary>
    
      <category term="test" scheme="https://decodezp.github.io/categories/test/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="performance" scheme="https://decodezp.github.io/tags/performance/"/>
    
      <category term="test" scheme="https://decodezp.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>Quickwords27 Skylake Microarchitecture(10)</title>
    <link href="https://decodezp.github.io/2019/04/20/quickwords27-skylake-pipeline-10/"/>
    <id>https://decodezp.github.io/2019/04/20/quickwords27-skylake-pipeline-10/</id>
    <published>2019-04-20T05:36:19.000Z</published>
    <updated>2019-04-20T05:39:11.955Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Load-and-Store-instructions&quot;&gt;&lt;a href=&quot;#Load-and-Store-instructions&quot; class=&quot;headerlink&quot; title=&quot;Load and Store instructions&quot;&gt;&lt;/a&gt;Load and Store instructions&lt;/h2&gt;&lt;p&gt;In previous chapters we discussed how does ROB and RS as well as RAT work. You may notice that we did not include &lt;code&gt;load&lt;/code&gt; and &lt;code&gt;store&lt;/code&gt; instruction in the demonstrated examples. This is partly due to simplification reason and partly because of the specialized mechanisms we will introduce in this article.&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="hardware" scheme="https://decodezp.github.io/tags/hardware/"/>
    
      <category term="CPU" scheme="https://decodezp.github.io/tags/CPU/"/>
    
  </entry>
  
  <entry>
    <title>tar命令速查手册</title>
    <link href="https://decodezp.github.io/2019/04/20/tar-cheat-sheet/"/>
    <id>https://decodezp.github.io/2019/04/20/tar-cheat-sheet/</id>
    <published>2019-04-19T19:15:05.000Z</published>
    <updated>2019-04-19T19:17:32.280Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;总是会忘记这个命令后面的各种参数对应的压缩格式，每次都要上网重新搜索。可能也是对这种“查一查就能知道”的信息天生缺乏敏感性，但每次都搜索显得实在不太professional，所以…那就在一个地方查吧 ^^&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
  </entry>
  
  <entry>
    <title>如果你到鲁汶来，一定要喝Stella</title>
    <link href="https://decodezp.github.io/2019/04/19/thoughts7-leuven-stella/"/>
    <id>https://decodezp.github.io/2019/04/19/thoughts7-leuven-stella/</id>
    <published>2019-04-19T06:56:20.000Z</published>
    <updated>2019-04-19T07:02:21.962Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;自打那次正式的告别之后，很久都没有再梦见过鲁汶。那几年大部分的时光，都仿佛跌入了时间的黑洞，如今能找到的，只有下面这篇旧文中的只言片语。刚想要深入挖掘一下脑海中的记忆，却又畏葸不前——毕竟清扫记忆这事，如扫落叶，旋扫旋生。&lt;br&gt;
    
    </summary>
    
      <category term="thoughts" scheme="https://decodezp.github.io/categories/thoughts/"/>
    
    
      <category term="thoughts" scheme="https://decodezp.github.io/tags/thoughts/"/>
    
  </entry>
  
  <entry>
    <title>夜色温柔</title>
    <link href="https://decodezp.github.io/2019/04/17/thoughts6-tender-is-the-night/"/>
    <id>https://decodezp.github.io/2019/04/17/thoughts6-tender-is-the-night/</id>
    <published>2019-04-16T16:06:41.000Z</published>
    <updated>2019-04-19T07:00:49.522Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;好像总是不能沉浸在当下。看着书想着邮件，吃着饭想着项目，看着电影想着停车费，在外面喝酒想着一会回家撸猫。&lt;br&gt;
    
    </summary>
    
      <category term="thoughts" scheme="https://decodezp.github.io/categories/thoughts/"/>
    
    
      <category term="thoughts" scheme="https://decodezp.github.io/tags/thoughts/"/>
    
  </entry>
  
  <entry>
    <title>商业供稿3：2019云计算安全5大趋势</title>
    <link href="https://decodezp.github.io/2019/04/15/commerical3-2019-cloud-security-trends/"/>
    <id>https://decodezp.github.io/2019/04/15/commerical3-2019-cloud-security-trends/</id>
    <published>2019-04-15T12:18:29.000Z</published>
    <updated>2019-04-15T12:23:59.865Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;原载于云杉网络 &lt;a href=&quot;http://www.yunshan.net&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;www.yunshan.net&lt;/a&gt; 微信公众号&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;安全将成为云计算最大的挑战&quot;&gt;&lt;a href=&quot;#安全将成为云计算最大的挑战&quot; class=&quot;headerlink&quot; title=&quot;安全将成为云计算最大的挑战&quot;&gt;&lt;/a&gt;安全将成为云计算最大的挑战&lt;/h2&gt;
    
    </summary>
    
      <category term="commerical" scheme="https://decodezp.github.io/categories/commerical/"/>
    
    
      <category term="commerical" scheme="https://decodezp.github.io/tags/commerical/"/>
    
  </entry>
  
  <entry>
    <title>Quickwords 26 Linux Perf Under The Hood</title>
    <link href="https://decodezp.github.io/2019/04/13/quickwords26-linux-perf-under-the-hood/"/>
    <id>https://decodezp.github.io/2019/04/13/quickwords26-linux-perf-under-the-hood/</id>
    <published>2019-04-12T16:22:44.000Z</published>
    <updated>2019-04-12T16:40:57.653Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Too many &lt;code&gt;perf&lt;/code&gt; usage articles exist on the Internet yet few talks about its source code, mechanism and architecture under the hood. For anyone who’s not satisfied with a black box, this article tries to address this.&lt;/p&gt;
&lt;h2 id=&quot;Hardware-Background-Knowledge&quot;&gt;&lt;a href=&quot;#Hardware-Background-Knowledge&quot; class=&quot;headerlink&quot; title=&quot;Hardware Background Knowledge&quot;&gt;&lt;/a&gt;Hardware Background Knowledge&lt;/h2&gt;&lt;p&gt;You probably know that &lt;code&gt;perf&lt;/code&gt; retrieves CPU hardware PMU counter value at some regular sampling frequency to make everything happen. The path through the hardware value is called &lt;code&gt;MSR(Model-Specific Register)&lt;/code&gt; operations. Note that &lt;code&gt;MSR&lt;/code&gt; is a general designation for various kinds of registers and PMU is just a small portion of it. To be more specific, we are mainly talking about the Performance Event Select Registers and the Performance Monitoring Counters(PMC) which make up the PMU together. By interacting with the Performance Event Select Register at the software side, value of performance events is streaming out via PMC.&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="perf" scheme="https://decodezp.github.io/tags/perf/"/>
    
  </entry>
  
  <entry>
    <title>几句话说清楚25：Skylake微架构(Microarchitecture)剖析(9)</title>
    <link href="https://decodezp.github.io/2019/04/08/quickwords25-skylake-pipeline-9/"/>
    <id>https://decodezp.github.io/2019/04/08/quickwords25-skylake-pipeline-9/</id>
    <published>2019-04-07T17:20:24.000Z</published>
    <updated>2019-04-07T17:25:47.250Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;接&lt;a href=&quot;https://decodezp.github.io/2019/04/06/quickwords24-skylake-pipeline-8/&quot;&gt;上期&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;第六个cycle之后&quot;&gt;&lt;a href=&quot;#第六个cycle之后&quot; class=&quot;headerlink&quot; title=&quot;第六个cycle之后&quot;&gt;&lt;/a&gt;第六个cycle之后&lt;/h2&gt;&lt;p&gt;看一下第六个cycle时会发生什么。&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="hardware" scheme="https://decodezp.github.io/tags/hardware/"/>
    
      <category term="CPU" scheme="https://decodezp.github.io/tags/CPU/"/>
    
  </entry>
  
  <entry>
    <title>几句话说清楚24：Skylake微架构(Microarchitecture)剖析(8)</title>
    <link href="https://decodezp.github.io/2019/04/06/quickwords24-skylake-pipeline-8/"/>
    <id>https://decodezp.github.io/2019/04/06/quickwords24-skylake-pipeline-8/</id>
    <published>2019-04-06T04:58:15.000Z</published>
    <updated>2019-04-06T04:59:55.285Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一个示例介绍Reorder-Buffer-ROB-和Register-Alias-Table-RAT-和Reservation-Station-RS&quot;&gt;&lt;a href=&quot;#一个示例介绍Reorder-Buffer-ROB-和Register-Alias-Table-RAT-和Reservation-Station-RS&quot; class=&quot;headerlink&quot; title=&quot;一个示例介绍Reorder Buffer(ROB)和Register Alias Table(RAT)和Reservation Station(RS)&quot;&gt;&lt;/a&gt;一个示例介绍Reorder Buffer(ROB)和Register Alias Table(RAT)和Reservation Station(RS)&lt;/h2&gt;&lt;p&gt;理解乱序执行（Out-of-Order）的核心其实就是把ROB，RAT和RS这三个组件搞透。&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="hardware" scheme="https://decodezp.github.io/tags/hardware/"/>
    
      <category term="CPU" scheme="https://decodezp.github.io/tags/CPU/"/>
    
  </entry>
  
  <entry>
    <title>几句话说清楚23：Skylake微架构(Microarchitecture)剖析(7)</title>
    <link href="https://decodezp.github.io/2019/04/03/quickwords23-skylake-pipeline-7/"/>
    <id>https://decodezp.github.io/2019/04/03/quickwords23-skylake-pipeline-7/</id>
    <published>2019-04-03T14:01:30.000Z</published>
    <updated>2019-04-06T05:08:20.991Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;接前Register-Rename&quot;&gt;&lt;a href=&quot;#接前Register-Rename&quot; class=&quot;headerlink&quot; title=&quot;接前Register Rename&quot;&gt;&lt;/a&gt;接前Register Rename&lt;/h2&gt;&lt;p&gt;这次得用Markdown画表格了，想来想去用&lt;code&gt;markdown&lt;/code&gt;这么久还是第一次。&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="hardware" scheme="https://decodezp.github.io/tags/hardware/"/>
    
      <category term="CPU" scheme="https://decodezp.github.io/tags/CPU/"/>
    
  </entry>
  
  <entry>
    <title>雨中冒险2 Risk Of Rain 2</title>
    <link href="https://decodezp.github.io/2019/04/03/games-risk-of-rain-2/"/>
    <id>https://decodezp.github.io/2019/04/03/games-risk-of-rain-2/</id>
    <published>2019-04-03T13:38:40.000Z</published>
    <updated>2019-04-06T05:09:38.542Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;《雨中冒险》是我买的第一款Steam游戏。&lt;/p&gt;
&lt;p&gt;6年前，刚刚毕业，手边只有一台上学时陪伴着我的笔记本电脑，我知道它只能带得动这种简陋的像素风游戏。&lt;br&gt;
    
    </summary>
    
      <category term="game" scheme="https://decodezp.github.io/categories/game/"/>
    
    
      <category term="game" scheme="https://decodezp.github.io/tags/game/"/>
    
      <category term="life" scheme="https://decodezp.github.io/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>几句话说清楚22：什么是AF_XDP Socket</title>
    <link href="https://decodezp.github.io/2019/03/26/quickwords22-af-xdp/"/>
    <id>https://decodezp.github.io/2019/03/26/quickwords22-af-xdp/</id>
    <published>2019-03-26T14:24:25.000Z</published>
    <updated>2019-03-26T14:36:30.222Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;AF-XDP&quot;&gt;&lt;a href=&quot;#AF-XDP&quot; class=&quot;headerlink&quot; title=&quot;AF_XDP&quot;&gt;&lt;/a&gt;AF_XDP&lt;/h2&gt;&lt;p&gt;默认读者已经了解XDP(eXpress Data Path)的概念。&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
  </entry>
  
  <entry>
    <title>后凉龙骧将军吕邈教你如何一本正经胡说八道</title>
    <link href="https://decodezp.github.io/2019/03/24/history3-lvmiao/"/>
    <id>https://decodezp.github.io/2019/03/24/history3-lvmiao/</id>
    <published>2019-03-24T13:26:32.000Z</published>
    <updated>2019-03-24T13:49:11.502Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;胡说八道容易，看起来一本正经也不难，但那都是从你自己的眼光出发。&lt;/p&gt;
&lt;p&gt;让别人看起来同样一本正经就非常有挑战了，即便你真的是在一本正经。&lt;/p&gt;
    
    </summary>
    
      <category term="history" scheme="https://decodezp.github.io/categories/history/"/>
    
    
      <category term="history" scheme="https://decodezp.github.io/tags/history/"/>
    
  </entry>
  
  <entry>
    <title>商业供稿2：网络可视化如何抵御数字化转型风险</title>
    <link href="https://decodezp.github.io/2019/03/23/commerical2-visibility-digital-transform/"/>
    <id>https://decodezp.github.io/2019/03/23/commerical2-visibility-digital-transform/</id>
    <published>2019-03-23T00:41:19.000Z</published>
    <updated>2019-03-23T00:46:23.346Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;原载于云杉网络 &lt;a href=&quot;http://www.yunshan.net&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;www.yunshan.net&lt;/a&gt; 微信公众号&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;当前，“数字化转型”已成为企业或组织绕不过去的一个话题。诚然，并非所有(云杉网络的)客户都会直接声称“我们正在数字化转型”或者“我们正在做一个数字化转型的项目”，但对IT基础设施进行敏捷性改造，提升业务灵活性和效率，已是各行各业的一致追求。&lt;br&gt;
    
    </summary>
    
      <category term="commerical" scheme="https://decodezp.github.io/categories/commerical/"/>
    
    
      <category term="commerical" scheme="https://decodezp.github.io/tags/commerical/"/>
    
  </entry>
  
  <entry>
    <title>生小猫啦</title>
    <link href="https://decodezp.github.io/2019/03/20/hello-kitty/"/>
    <id>https://decodezp.github.io/2019/03/20/hello-kitty/</id>
    <published>2019-03-20T12:33:55.000Z</published>
    <updated>2019-03-20T12:35:07.521Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;去年夏天的时候家里从地铁站门口迎来了两位新成员，蓝猫derder和他的媳妇葡萄。&lt;/p&gt;
&lt;p&gt;我其实本意并不想养宠物的，毕竟从小到大除了养过两只乌龟之外，从来也没和动物有过什么亲密接触。养猫基本上都是张老师的主意，她从小就是养鸡小能手，还养过狗啊鱼啊刺猬啊这些，所以一直想在家里恢复一下她的童年记忆。&lt;br&gt;
    
    </summary>
    
      <category term="thoughts" scheme="https://decodezp.github.io/categories/thoughts/"/>
    
    
      <category term="thoughts" scheme="https://decodezp.github.io/tags/thoughts/"/>
    
  </entry>
  
  <entry>
    <title>OVS-DPDK 82599 VF初始化失败诊断方法一例</title>
    <link href="https://decodezp.github.io/2019/03/19/82599-vf-err-debug/"/>
    <id>https://decodezp.github.io/2019/03/19/82599-vf-err-debug/</id>
    <published>2019-03-19T12:55:24.000Z</published>
    <updated>2019-03-19T15:51:46.783Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;在82599上创建了两个VF之后，各自绑定到vfio，启动DPDK时出现错误：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;PMD: eth_ixgbevf_dev_init(): VF Initialization Failure: -15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;EAL: Error - exiting with code: 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Cause: Requested device 0000:01:10.0 cannot be used&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="dpdk" scheme="https://decodezp.github.io/tags/dpdk/"/>
    
  </entry>
  
  <entry>
    <title>几句话说清楚21：Skylake微架构(Microarchitecture)剖析(6)</title>
    <link href="https://decodezp.github.io/2019/03/10/quickwords21-skylake-pipeline-6/"/>
    <id>https://decodezp.github.io/2019/03/10/quickwords21-skylake-pipeline-6/</id>
    <published>2019-03-10T03:44:34.000Z</published>
    <updated>2019-03-10T03:48:45.973Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;OOO-Once-More&quot;&gt;&lt;a href=&quot;#OOO-Once-More&quot; class=&quot;headerlink&quot; title=&quot;OOO Once More&quot;&gt;&lt;/a&gt;OOO Once More&lt;/h2&gt;&lt;p&gt;这里对OOO(Out-Of-Order)乱序执行再简单讲两句。深入乱序执行的难点不在于“不按指令顺序执行”，而是如何做到“按指令顺序退出”。&lt;/p&gt;
&lt;p&gt;这里面的关键是，所有执行过的指令都先被“缓存”起来，并不把执行之后的结果真正写到寄存器或者内存里。从用户角度看，这个指令其实并没有被“执行”，因为它没有引起任何数据方面的变化。等到它可以确定是需要被执行的指令，并且它前面的指令都已经把结果写入(commit)之后，它再去Commit。这样从用户角度看来，程序就是按照指令顺序执行了。&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="hardware" scheme="https://decodezp.github.io/tags/hardware/"/>
    
      <category term="CPU" scheme="https://decodezp.github.io/tags/CPU/"/>
    
  </entry>
  
  <entry>
    <title>在控制台水平滚动</title>
    <link href="https://decodezp.github.io/2019/03/07/terminal-horizontal-scrolling/"/>
    <id>https://decodezp.github.io/2019/03/07/terminal-horizontal-scrolling/</id>
    <published>2019-03-07T13:05:17.000Z</published>
    <updated>2019-03-07T13:06:42.596Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在CLI下操作，很多时候会因为屏幕尺寸的原因导致格式化输出的字符变成一副惨不忍睹的样子。比如你在有很多CPU核的环境下打印&lt;code&gt;cat /proc/interrupts&lt;/code&gt;的时候。&lt;/p&gt;
&lt;p&gt;当然你可能有很多方式能够处理这种情形，比如使用&lt;code&gt;awk&lt;/code&gt;或者重定向到某个文件再打开。&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="linux" scheme="https://decodezp.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>商业供稿1：消除虚拟化环境网络盲点</title>
    <link href="https://decodezp.github.io/2019/03/05/commerical1-eliminate-vnet-blind-spot/"/>
    <id>https://decodezp.github.io/2019/03/05/commerical1-eliminate-vnet-blind-spot/</id>
    <published>2019-03-05T13:23:21.000Z</published>
    <updated>2019-03-23T00:45:36.061Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;原载于云杉网络 &lt;a href=&quot;http://www.yunshan.net&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;www.yunshan.net&lt;/a&gt; 微信公众号&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;网络盲点是引起虚拟化环境中业务中断、服务质量下降以及遭受安全威胁的最主要原因。当公司或组织缺乏网络可见性，无法完全掌握其虚拟化环境中业务的网络运行情况时，将必然面临频繁的业务中断、客户投诉以及恶意攻击带来的损失。据Gartner预测，到2019年，实现适当的网络可见性和控制工具的60%的企业将减少三分之一的安全故障。&lt;/p&gt;
&lt;p&gt;随着业务规模的扩大，公司和组织对网络可见性的投入亦将会持续增加。但除了购买增强网络可见性的产品和服务之外，还应针对虚拟化环境中的业务特点，从以下几个导致网络盲点的原因出发，构建完善的网络监控和安全体系。&lt;br&gt;
    
    </summary>
    
      <category term="commerical" scheme="https://decodezp.github.io/categories/commerical/"/>
    
    
      <category term="commerical" scheme="https://decodezp.github.io/tags/commerical/"/>
    
  </entry>
  
  <entry>
    <title>几句话说清楚20：eBPF的机制</title>
    <link href="https://decodezp.github.io/2019/03/01/quickwords20-ebpf-intro/"/>
    <id>https://decodezp.github.io/2019/03/01/quickwords20-ebpf-intro/</id>
    <published>2019-03-01T13:56:23.000Z</published>
    <updated>2019-03-01T14:10:14.433Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;怎么出来的eBPF&quot;&gt;&lt;a href=&quot;#怎么出来的eBPF&quot; class=&quot;headerlink&quot; title=&quot;怎么出来的eBPF&quot;&gt;&lt;/a&gt;怎么出来的eBPF&lt;/h2&gt;&lt;p&gt;用Linux Kernel Module来做一个类比说明eBPF诞生的目的。&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
  </entry>
  
</feed>
