<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DecodeZ</title>
  
  <subtitle>刚日读经，柔日读史</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://decodezp.github.io/"/>
  <updated>2019-01-27T13:29:03.211Z</updated>
  <id>https://decodezp.github.io/</id>
  
  <author>
    <name>Pan Zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>几句话说清楚13：什么是Top-Down性能分析方法</title>
    <link href="https://decodezp.github.io/2019/01/27/quickwords13-tma/"/>
    <id>https://decodezp.github.io/2019/01/27/quickwords13-tma/</id>
    <published>2019-01-27T13:17:45.000Z</published>
    <updated>2019-01-27T13:29:03.211Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目的&quot;&gt;&lt;a href=&quot;#目的&quot; class=&quot;headerlink&quot; title=&quot;目的&quot;&gt;&lt;/a&gt;目的&lt;/h2&gt;&lt;p&gt;前几篇连续介绍了一些Skylake微架构的内容（还没有结束，还会继续填坑），主要目的并不是要对读者开启名词或者概念的Flood攻击，而是为了方便读者以后可以“有理有据”地进行软件的性能优化。&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="hardware" scheme="https://decodezp.github.io/tags/hardware/"/>
    
      <category term="CPU" scheme="https://decodezp.github.io/tags/CPU/"/>
    
  </entry>
  
  <entry>
    <title>测来测去6：Linux网络性能调优方法（补遗）</title>
    <link href="https://decodezp.github.io/2019/01/24/test6-linux-network-performance-optimization-2/"/>
    <id>https://decodezp.github.io/2019/01/24/test6-linux-network-performance-optimization-2/</id>
    <published>2019-01-24T10:35:31.000Z</published>
    <updated>2019-01-24T10:36:53.721Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;没提到的&quot;&gt;&lt;a href=&quot;#没提到的&quot; class=&quot;headerlink&quot; title=&quot;没提到的&quot;&gt;&lt;/a&gt;没提到的&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://decodezp.github.io/2019/01/22/test5-linux-network-performance-optimization/&quot;&gt;上一篇&lt;/a&gt;内容中介绍了一些Linux网络协议栈的调优方法，但遗漏了一些可以发挥重要作用的方法，在这一篇中补充一下。&lt;br&gt;
    
    </summary>
    
      <category term="test" scheme="https://decodezp.github.io/categories/test/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="network" scheme="https://decodezp.github.io/tags/network/"/>
    
      <category term="performance" scheme="https://decodezp.github.io/tags/performance/"/>
    
      <category term="test" scheme="https://decodezp.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>测来测去5：Linux网络性能调优方法</title>
    <link href="https://decodezp.github.io/2019/01/22/test5-linux-network-performance-optimization/"/>
    <id>https://decodezp.github.io/2019/01/22/test5-linux-network-performance-optimization/</id>
    <published>2019-01-22T13:06:06.000Z</published>
    <updated>2019-01-22T13:21:27.637Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;换换口味&quot;&gt;&lt;a href=&quot;#换换口味&quot; class=&quot;headerlink&quot; title=&quot;换换口味&quot;&gt;&lt;/a&gt;换换口味&lt;/h2&gt;&lt;p&gt;老搞DPDK的人有一个毛病就是怎么也看不上内核网络，又是中断又是拷贝的，实在没有一脚地板油CPU直接100%炸街来得爽快。另外作为一个软件性能优化的“硬核”玩家，是很看不上内核这种改改参数，调调设置的玩法的。不过…既然自己主动跳了个大坑，该调内核性能的时候还是要调的…所以今天就换换口味，看看在Linux下通过配置调优网络性能怎么搞。&lt;/p&gt;
    
    </summary>
    
      <category term="test" scheme="https://decodezp.github.io/categories/test/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="network" scheme="https://decodezp.github.io/tags/network/"/>
    
      <category term="performance" scheme="https://decodezp.github.io/tags/performance/"/>
    
      <category term="test" scheme="https://decodezp.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>几句话说清楚12：Skylake微架构(Microarchitecture)剖析(4)</title>
    <link href="https://decodezp.github.io/2019/01/20/quickwords12-skylake-pipeline-4/"/>
    <id>https://decodezp.github.io/2019/01/20/quickwords12-skylake-pipeline-4/</id>
    <published>2019-01-20T05:37:25.000Z</published>
    <updated>2019-01-27T13:29:05.176Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;MSROM&quot;&gt;&lt;a href=&quot;#MSROM&quot; class=&quot;headerlink&quot; title=&quot;MSROM&quot;&gt;&lt;/a&gt;MSROM&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://en.wikichip.org/w/images/thumb/5/5e/skylake_decode.svg/425px-skylake_decode.svg.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;MSROM(Micro-code sequencer ROM)就是在&lt;a href=&quot;https://decodezp.github.io/2019/01/12/quickwords11-skylake-pipeline-3/&quot;&gt;上一篇连载&lt;/a&gt;中提到的专门处理输出大于4个uop的那块类似缓存的ROM。很多文档里面也直接将其称为&lt;code&gt;MS&lt;/code&gt;，具体叫什么多需要结合上下文语境，知道是一回事就好了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我个人其实推荐读者在编写自己的文档时能注意这些名称上的“一致性”，同编写程序时给变量或函数命名时的一致性一样，这些看似没什么“技术含量”的工作，却能够极大地提高信息传达的效率，也就是提高文档或代码的可读性和可维护性。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="hardware" scheme="https://decodezp.github.io/tags/hardware/"/>
    
      <category term="CPU" scheme="https://decodezp.github.io/tags/CPU/"/>
    
  </entry>
  
  <entry>
    <title>有时做梦</title>
    <link href="https://decodezp.github.io/2019/01/19/thoughts4-dream/"/>
    <id>https://decodezp.github.io/2019/01/19/thoughts4-dream/</id>
    <published>2019-01-19T06:08:32.000Z</published>
    <updated>2019-01-19T06:34:17.465Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;活得年头多起来之后，很难再明确地忆起某件事发生在哪一年。时间变得不再激烈，但往事却在交织纠缠，许多不可能的事还以为理所当然，而那些早已发生的事实却总需要确认再三。&lt;/p&gt;
    
    </summary>
    
      <category term="thoughts" scheme="https://decodezp.github.io/categories/thoughts/"/>
    
    
      <category term="thoughts" scheme="https://decodezp.github.io/tags/thoughts/"/>
    
  </entry>
  
  <entry>
    <title>在OpenWRT中添加perf工具</title>
    <link href="https://decodezp.github.io/2019/01/15/openwrt-perf/"/>
    <id>https://decodezp.github.io/2019/01/15/openwrt-perf/</id>
    <published>2019-01-15T14:08:39.000Z</published>
    <updated>2019-01-15T14:16:05.292Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;OpenWRT性能调优的必要&quot;&gt;&lt;a href=&quot;#OpenWRT性能调优的必要&quot; class=&quot;headerlink&quot; title=&quot;OpenWRT性能调优的必要&quot;&gt;&lt;/a&gt;OpenWRT性能调优的必要&lt;/h2&gt;&lt;p&gt;如果仅仅是家庭网关，确实没太大必要，毕竟网络的瓶颈主要在运营商的出口那。OpenWRT之所以开始关注极致的性能，是由于OpenWRT的应用场景出现了变化。从SD-WAN和边缘计算概念，到混合云与智能网关，都催生出了在边缘接入侧uCPE或其他类似的小盒子中部署基于OpenWRT系统的必要。不同于满足家庭接入的需求，这些小盒子往往对应一间Office或公司分支的网络需求。增长的网络带宽和对安全性、QoS等能力的要求都对OpenWRT的性能提出了更高的要求。&lt;/p&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="openwrt" scheme="https://decodezp.github.io/tags/openwrt/"/>
    
  </entry>
  
  <entry>
    <title>王朝兴亡周期律的本因</title>
    <link href="https://decodezp.github.io/2019/01/13/thoughts3-zhouqilv/"/>
    <id>https://decodezp.github.io/2019/01/13/thoughts3-zhouqilv/</id>
    <published>2019-01-13T15:50:04.000Z</published>
    <updated>2019-01-13T15:59:19.841Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;王朝兴亡周期律&quot;&gt;&lt;a href=&quot;#王朝兴亡周期律&quot; class=&quot;headerlink&quot; title=&quot;王朝兴亡周期律&quot;&gt;&lt;/a&gt;王朝兴亡周期律&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;六位参政员将要回重庆时，毛泽东问黄炎培有什么感想，黄炎培坦率地说：“我生六十多年，耳闻的不说，所亲眼看到的，真所谓‘其兴也勃焉’，‘其亡也忽焉’，一人，一家，一团体，一地方，乃至一国，不少单位都没有跳出这周期率的支配力。大凡初时聚精会神，没有一事不用心，没有一人不卖力，也许那时艰难困苦，只有从万死中觅取一生。既而环境渐渐好转了，精神也就渐渐放下了。有的因为历史长久，自然地惰性发作，由少数演变为多数，到风气养成，虽有大力，无法扭转，并且无法补救。也有为了区域一步步扩大，它的扩大，有的出于自然发展，有的为功业欲所驱使，强求发展，到干部人才渐见竭蹶、艰于应付的时候，环境倒越加复杂起来了，控制力不免趋于薄弱了。一部历史‘政怠宦成’的也有，‘人亡政息’的也有，‘求荣取辱’的也有。总之没有能跳出这周期率。中共诸君从过去到现在，我略略了解的了。就是希望找出一条新路，来跳出这周期率的支配。”&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="thoughts" scheme="https://decodezp.github.io/categories/thoughts/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="thoughts" scheme="https://decodezp.github.io/tags/thoughts/"/>
    
  </entry>
  
  <entry>
    <title>几句话说清楚11：Skylake微架构(Microarchitecture)剖析(3)</title>
    <link href="https://decodezp.github.io/2019/01/12/quickwords11-skylake-pipeline-3/"/>
    <id>https://decodezp.github.io/2019/01/12/quickwords11-skylake-pipeline-3/</id>
    <published>2019-01-12T04:50:46.000Z</published>
    <updated>2019-01-12T04:52:25.295Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;解码&quot;&gt;&lt;a href=&quot;#解码&quot; class=&quot;headerlink&quot; title=&quot;解码&quot;&gt;&lt;/a&gt;解码&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://en.wikichip.org/w/images/thumb/5/5e/skylake_decode.svg/425px-skylake_decode.svg.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在拿到了经过“预解码”的&lt;code&gt;macro-ops&lt;/code&gt;之后，开始正式进入解码过程。&lt;code&gt;marco-ops&lt;/code&gt;进入Instruction Decode组件解码，最终的输出为定长的&lt;code&gt;micro-ops&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;Insturction Decode组件也有入口带宽限制，每个Cycle最多取3个unfused指令+2个fused指令，或者5个unfused指令（这里指macro ops）。所以说fused多了也不好，一个cycle最多取两个。同时如果开了Hyper Thread，则两个Thread按Cycle交替使用Instruction Decode。&lt;/p&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="hardware" scheme="https://decodezp.github.io/tags/hardware/"/>
    
      <category term="CPU" scheme="https://decodezp.github.io/tags/CPU/"/>
    
  </entry>
  
  <entry>
    <title>几句话说清楚10：Skylake微架构(Microarchitecture)剖析(2)</title>
    <link href="https://decodezp.github.io/2019/01/10/quickwords10-skylake-pipeline-2/"/>
    <id>https://decodezp.github.io/2019/01/10/quickwords10-skylake-pipeline-2/</id>
    <published>2019-01-10T09:42:40.000Z</published>
    <updated>2019-01-20T05:42:58.966Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前端&quot;&gt;&lt;a href=&quot;#前端&quot; class=&quot;headerlink&quot; title=&quot;前端&quot;&gt;&lt;/a&gt;前端&lt;/h2&gt;&lt;p&gt;处理器在前端这一部分的时候还是顺序(in-order)处理的，主要是也确实没什么乱序的空间。虽然说是顺序，但前端因为贴近业务，所以受人写的代码的影响也比较大。如果仅仅只是“取指令-&amp;gt;解码”，恐怕需要写程序的人是个非常聪明的程序员。前端很多组件的工作其实都是在填程序员的坑，这也是我比较心疼前端的地方。&lt;/p&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="hardware" scheme="https://decodezp.github.io/tags/hardware/"/>
    
      <category term="CPU" scheme="https://decodezp.github.io/tags/CPU/"/>
    
  </entry>
  
  <entry>
    <title>几句话说清楚9：Skylake微架构(Microarchitecture)剖析(1)</title>
    <link href="https://decodezp.github.io/2019/01/07/quickwords9-skylake-pipeline-1/"/>
    <id>https://decodezp.github.io/2019/01/07/quickwords9-skylake-pipeline-1/</id>
    <published>2019-01-07T15:52:11.000Z</published>
    <updated>2019-01-07T15:55:42.417Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;楔子&quot;&gt;&lt;a href=&quot;#楔子&quot; class=&quot;headerlink&quot; title=&quot;楔子&quot;&gt;&lt;/a&gt;楔子&lt;/h2&gt;&lt;p&gt;了解CPU的微架构是基于其开发“硬核”软件的必需步骤。由于一些历史遗留问题，现存的技术资料往往存在一些概念混淆、重复命名甚至自相矛盾之处。本文一来梳理Skylake微架构(主要是流水线)的组成和特性，二来试图厘清一些含混的概念用以帮助后来者。&lt;/p&gt;
&lt;p&gt;另外在介绍完微架构之后，会继续结合&lt;code&gt;Perf&lt;/code&gt;中的&lt;code&gt;Performance Event&lt;/code&gt;来对照说明互为印证。&lt;/p&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="hardware" scheme="https://decodezp.github.io/tags/hardware/"/>
    
      <category term="CPU" scheme="https://decodezp.github.io/tags/CPU/"/>
    
  </entry>
  
  <entry>
    <title>汉光文帝教你如何提出领导无法拒绝的方案</title>
    <link href="https://decodezp.github.io/2019/01/05/history2-liuyuan/"/>
    <id>https://decodezp.github.io/2019/01/05/history2-liuyuan/</id>
    <published>2019-01-05T06:24:48.000Z</published>
    <updated>2019-01-05T06:40:23.713Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;在成为领导之前&quot;&gt;&lt;a href=&quot;#在成为领导之前&quot; class=&quot;headerlink&quot; title=&quot;在成为领导之前&quot;&gt;&lt;/a&gt;在成为领导之前&lt;/h2&gt;&lt;p&gt;只有开国皇帝的孙子生下来就是皇帝，开国皇帝往往都给别人打过工。&lt;/p&gt;
&lt;p&gt;别人给老板打工，不高兴了可以换个老板，而开国皇帝给老板打工，不想干了还必须得干掉老板。&lt;br&gt;
    
    </summary>
    
      <category term="history" scheme="https://decodezp.github.io/categories/history/"/>
    
    
      <category term="history" scheme="https://decodezp.github.io/tags/history/"/>
    
  </entry>
  
  <entry>
    <title>测来测去4：82599在DPDK下使用fdir</title>
    <link href="https://decodezp.github.io/2019/01/04/test4-82599-fdir/"/>
    <id>https://decodezp.github.io/2019/01/04/test4-82599-fdir/</id>
    <published>2019-01-04T05:09:54.000Z</published>
    <updated>2019-01-04T05:12:04.380Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文档过期&quot;&gt;&lt;a href=&quot;#文档过期&quot; class=&quot;headerlink&quot; title=&quot;文档过期&quot;&gt;&lt;/a&gt;文档过期&lt;/h2&gt;&lt;p&gt;近期有客户反馈82599的fdir(flow director)功能在DPDK环境下不生效，本想丢一个DPDK官网上的82599 fdir测试资料过去，但幸好我仔细看了一下测试流程，发现这个&lt;a href=&quot;https://doc.dpdk.org/dts/test_plans/fdir_test_plan.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;里使用的&lt;code&gt;testpmd&lt;/code&gt;命令已经过期了(时间戳：Jan 3rd, 2019)….所以…我自己写一个吧。&lt;/p&gt;
    
    </summary>
    
      <category term="test" scheme="https://decodezp.github.io/categories/test/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="network" scheme="https://decodezp.github.io/tags/network/"/>
    
      <category term="dpdk" scheme="https://decodezp.github.io/tags/dpdk/"/>
    
      <category term="test" scheme="https://decodezp.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>唯识与C语言指针</title>
    <link href="https://decodezp.github.io/2018/12/31/thoughts2-weishi-c-pointer/"/>
    <id>https://decodezp.github.io/2018/12/31/thoughts2-weishi-c-pointer/</id>
    <published>2018-12-30T17:06:05.000Z</published>
    <updated>2018-12-30T17:26:02.327Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;旧文虽无殊胜处却最解少年意，重发于此，乃自喜其披坚执锐行而无返之气。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;作者按&quot;&gt;&lt;a href=&quot;#作者按&quot; class=&quot;headerlink&quot; title=&quot;作者按&quot;&gt;&lt;/a&gt;作者按&lt;/h1&gt;&lt;p&gt;丙申孟春，始得熊君十力之微言宏旨，于《新唯识论》中得窥心外无物，体用不二，翕辟成变之理。数年兵、道、史、释之学，终为一脉贯通，于世间纷杂，万相罗织，始有定见。乃身蹈统摄之道，心得自在清凉，不免情动于衷，喜不自胜。&lt;/p&gt;
&lt;p&gt;熊君为阐唯识之旨，于书中多举譬喻。举“海水与众沤”喻，“绳索与大麻”喻种种；更尝作图形，以穷其本旨，表其胜义，苦口婆心，令人动容，非沐手开卷不能彰其功，焚香斋戒不能铭其德。吾观乎此学，虽能以物物强为譬喻，然万物浩汤，皆为大化，果有以大化喻大化之理乎？终须另觅一人造之物，探幽寻明，见微知著，庶几可得于大化矣。今请试以指针喻之。&lt;/p&gt;
&lt;p&gt;下面开始正常说话。&lt;br&gt;
    
    </summary>
    
      <category term="thoughts" scheme="https://decodezp.github.io/categories/thoughts/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="thoughts" scheme="https://decodezp.github.io/tags/thoughts/"/>
    
  </entry>
  
  <entry>
    <title>吃牛排的技术</title>
    <link href="https://decodezp.github.io/2018/12/28/steak/"/>
    <id>https://decodezp.github.io/2018/12/28/steak/</id>
    <published>2018-12-28T09:35:26.000Z</published>
    <updated>2018-12-28T09:39:19.317Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;虽然不知道背后是什么原理，但烤出好吃的牛排一定是一门重要的技术。&lt;/p&gt;
&lt;p&gt;因为重要的技术，门槛一般都很高。它的高不仅体现在如何掌握这门技术，还体现在如何使用这门技术。&lt;br&gt;
    
    </summary>
    
      <category term="thoughts" scheme="https://decodezp.github.io/categories/thoughts/"/>
    
    
      <category term="thoughts" scheme="https://decodezp.github.io/tags/thoughts/"/>
    
  </entry>
  
  <entry>
    <title>测来测去3：抽象层直接调用实例方法性能提高百分之20</title>
    <link href="https://decodezp.github.io/2018/12/27/test3-indirectcall/"/>
    <id>https://decodezp.github.io/2018/12/27/test3-indirectcall/</id>
    <published>2018-12-27T12:40:30.000Z</published>
    <updated>2018-12-27T12:49:18.335Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;首先吐槽一下hexo标题不能以%结尾 -_-||&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;抽象层&quot;&gt;&lt;a href=&quot;#抽象层&quot; class=&quot;headerlink&quot; title=&quot;抽象层&quot;&gt;&lt;/a&gt;抽象层&lt;/h2&gt;&lt;p&gt;经常，我们会在相对比较成熟的软件中见到这样一类结构体：&lt;br&gt;
    
    </summary>
    
      <category term="test" scheme="https://decodezp.github.io/categories/test/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="performance" scheme="https://decodezp.github.io/tags/performance/"/>
    
      <category term="test" scheme="https://decodezp.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>几句话说清楚8：Intel 700系列网卡内部结构概览</title>
    <link href="https://decodezp.github.io/2018/12/25/quickwords8-700-nic-arch/"/>
    <id>https://decodezp.github.io/2018/12/25/quickwords8-700-nic-arch/</id>
    <published>2018-12-25T09:17:39.000Z</published>
    <updated>2018-12-27T12:39:54.302Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;一不小心这个系列写到了第8期，原本打算写些别的东西，不过看到8这个数字就想到了Intel将要推出的800系列网卡…的小弟——命途多舛的700系列网卡。从目前市场(主要是云计算、互联网公司和数据中心)的情况看，700系列有逐渐推广的趋势，那么这一期就介绍一下700系列网卡的基本技术架构和特点吧。&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="hardware" scheme="https://decodezp.github.io/tags/hardware/"/>
    
      <category term="network" scheme="https://decodezp.github.io/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>几句话说清楚7：DPDK不同CPU平台交叉编译指令不支持的问题</title>
    <link href="https://decodezp.github.io/2018/12/24/quickwords7-dpdk-cross-compile/"/>
    <id>https://decodezp.github.io/2018/12/24/quickwords7-dpdk-cross-compile/</id>
    <published>2018-12-24T13:06:12.000Z</published>
    <updated>2018-12-24T13:11:48.307Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;headerlink&quot; title=&quot;现象&quot;&gt;&lt;/a&gt;现象&lt;/h2&gt;&lt;p&gt;在比较高级的CPU平台(比如skylake)编译DPDK，会在编译的目标文件中加入一些高级指令集中的指令，比如AVX512。&lt;/p&gt;
&lt;p&gt;如果运行最终可执行文件的机器的CPU架构(比如broadwell)不支持编译机器中的指令，则会在执行时报类似这种错误：&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
      <category term="quickwords" scheme="https://decodezp.github.io/categories/tech/quickwords/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="dpdk" scheme="https://decodezp.github.io/tags/dpdk/"/>
    
  </entry>
  
  <entry>
    <title>5分钟经典英文技术演讲2：软件设计真正的精髓-Scott Meyer</title>
    <link href="https://decodezp.github.io/2018/12/21/eng-talk2-things-matter/"/>
    <id>https://decodezp.github.io/2018/12/21/eng-talk2-things-matter/</id>
    <published>2018-12-21T13:07:58.000Z</published>
    <updated>2018-12-21T13:20:43.840Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一个人的能力上限很大程度上取决于他获取信息的能力。&lt;/p&gt;
&lt;p&gt;而能力增长的速度与获取信息的_质量_正相关。&lt;/p&gt;
&lt;p&gt;不可否认，大量优质的技术内容都基于英文。“5分钟经典英文技术演讲”专门撷取国外最有价值的纯英文技术演讲，以最精炼的形式将信息传达给国内的技术同侪，绕过网络政策和语言的障碍，实现中西方技术世界无壁垒的信息同步。&lt;/p&gt;
&lt;p&gt;最新内容将发布于&lt;a href=&quot;https://decodezp.github.io&quot;&gt;DecodeZ&lt;/a&gt;: &lt;a href=&quot;https://decodezp.github.io&quot;&gt;https://decodezp.github.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://decodezp.github.io/2018/12/12/eng-talk1-fast-learn/&quot;&gt;往期回顾：如何快速掌握新技术&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;DConf2017：软件设计真正的精髓&quot;&gt;&lt;a href=&quot;#DConf2017：软件设计真正的精髓&quot; class=&quot;headerlink&quot; title=&quot;DConf2017：软件设计真正的精髓&quot;&gt;&lt;/a&gt;DConf2017：软件设计真正的精髓&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=RT46MpK39rQ&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原视频&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://dconf.org/2017/talks/meyers.pptx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PPT/Slides下载&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;演讲者：Scott Meyer&lt;/p&gt;
&lt;p&gt;上一张演讲者的照片，硬撸过C++的应该都很熟悉他:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2018/12/21/FsMA2R.jpg&quot; alt=&quot;Scott Meyer&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;摘要：成功的软件产品都有其共性。在Scott Meyer看来，这些共性由几个要素组成。在你的作品中考虑这些要素，将帮助你掌握软件设计真正的精髓。&lt;br&gt;
    
    </summary>
    
      <category term="ENG_talk" scheme="https://decodezp.github.io/categories/ENG-talk/"/>
    
    
      <category term="English" scheme="https://decodezp.github.io/tags/English/"/>
    
      <category term="Presentation" scheme="https://decodezp.github.io/tags/Presentation/"/>
    
  </entry>
  
  <entry>
    <title>几句话说清楚6：什么是DDP(Dynamic Device Personalization)</title>
    <link href="https://decodezp.github.io/2018/12/18/quickwords6-ddp/"/>
    <id>https://decodezp.github.io/2018/12/18/quickwords6-ddp/</id>
    <published>2018-12-18T12:25:40.000Z</published>
    <updated>2018-12-18T12:28:33.598Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;要解决的问题&quot;&gt;&lt;a href=&quot;#要解决的问题&quot; class=&quot;headerlink&quot; title=&quot;要解决的问题&quot;&gt;&lt;/a&gt;要解决的问题&lt;/h2&gt;&lt;p&gt;通过网卡的多队列和RSS将网包根据一些关键字段散列(hash)到不同的队列已成为一种主流的在x86平台开发信通以及云计算领域产品的方式。&lt;/p&gt;
&lt;p&gt;在整体产品架构规划中，不同的网卡队列(Rx/Tx Queues)往往对应/绑定着不同的CPU核(Worker)，以利用资源隔离的方式提高性能。&lt;/p&gt;
&lt;p&gt;传统的RSS，往往是依据header的五元组来做散列。通常，网卡可以识别出的报文类型包括&lt;code&gt;ipv4-tcp|ipv4-udp|ipv4-other|ipv6-tcp|l2-payload&lt;/code&gt;等等，然后根据能识别出的类型进行关键字段的提取。&lt;/p&gt;
&lt;p&gt;但现在如此简单的识别能力已经不能满足业务的需求。在复杂的协议和隧道通讯场景下，往往还需要识别隧道内层header甚至私有字段才能实现业务能力的最优化。&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="hardware" scheme="https://decodezp.github.io/tags/hardware/"/>
    
      <category term="network" scheme="https://decodezp.github.io/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>谁不是在像CPU一样活着</title>
    <link href="https://decodezp.github.io/2018/12/16/cpulized-life/"/>
    <id>https://decodezp.github.io/2018/12/16/cpulized-life/</id>
    <published>2018-12-16T10:06:40.000Z</published>
    <updated>2018-12-16T10:12:04.758Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;上一次兴奋到浑身发热，还是把赛扬300A超频到450兆赫的时候。身体如摩尔定律般长高，觉得距离1GHz只差一罐液氮，心里装着只有一心一意才能装下的事情。&lt;/p&gt;
&lt;p&gt;记得那时看到一篇报道，英特尔说“到2011年的时候，我们都能用上10GHz的电脑”。十几岁的你笑这家美国公司野心不大，现在你说出这件事，只是想给大家讲个笑话。&lt;br&gt;
    
    </summary>
    
      <category term="thoughts" scheme="https://decodezp.github.io/categories/thoughts/"/>
    
    
      <category term="thoughts" scheme="https://decodezp.github.io/tags/thoughts/"/>
    
  </entry>
  
</feed>
