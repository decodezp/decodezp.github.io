<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DecodeZ</title>
  
  <subtitle>刚日读经，柔日读史</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://decodezp.github.io/"/>
  <updated>2019-06-03T12:32:30.085Z</updated>
  <id>https://decodezp.github.io/</id>
  
  <author>
    <name>Pan Zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Gartner预测误差统计</title>
    <link href="https://decodezp.github.io/2019/06/03/gartner-prediction/"/>
    <id>https://decodezp.github.io/2019/06/03/gartner-prediction/</id>
    <published>2019-06-03T12:30:27.000Z</published>
    <updated>2019-06-03T12:32:30.085Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Gartner的预测&quot;&gt;&lt;a href=&quot;#Gartner的预测&quot; class=&quot;headerlink&quot; title=&quot;Gartner的预测&quot;&gt;&lt;/a&gt;Gartner的预测&lt;/h2&gt;&lt;p&gt;Gartner表面上是一家咨询公司，实际上是一家市场公关公司。不仅通过一些市场工具给厂商打广告，还直接给某样技术打广告，当然也兼做一些资源对接的中介服务。至于Gartner的分析报告，即便每年需要几十万的“咨询费”才能阅读，但我是从来没有完整看完过其中任何一篇，因为他们报告的题目都拟得非常好——非常精炼，也非常准确——所以有时候看完题目就好了。&lt;/p&gt;
&lt;p&gt;每当Gartner新公布了一项市场数字和指标之后，都会被各家媒体和相关厂商疯狂引用，作为论证市场繁荣和增长预期的最有力论据。但年复一年，我们永远盯住的是“下一个丰收的年景”，却不怎么关心当下的市场是否曾被准确勾画。以往知来，我们就以年年火热的云计算市场为例，统计一下Gartner的历史预测准确率。&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
  </entry>
  
  <entry>
    <title>测来测去14：Phoronix tinymembench结果不理想的可能原因</title>
    <link href="https://decodezp.github.io/2019/05/28/test14-phoronix-tinymembench/"/>
    <id>https://decodezp.github.io/2019/05/28/test14-phoronix-tinymembench/</id>
    <published>2019-05-28T12:44:02.000Z</published>
    <updated>2019-05-28T12:46:16.404Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Phoronix-tinymembench&quot;&gt;&lt;a href=&quot;#Phoronix-tinymembench&quot; class=&quot;headerlink&quot; title=&quot;Phoronix tinymembench&quot;&gt;&lt;/a&gt;Phoronix tinymembench&lt;/h2&gt;&lt;p&gt;这个测试经常用来衡量CPU&lt;code&gt;memcpy&lt;/code&gt;和&lt;code&gt;memset&lt;/code&gt;这两个基本操作的性能。最近在执行针对两款CPU的性能测试中，发现某款相对”高端“的CPU在这两个测试中表现与相对“低端”的CPU相比，存在较大差距。&lt;br&gt;
    
    </summary>
    
      <category term="test" scheme="https://decodezp.github.io/categories/test/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="test" scheme="https://decodezp.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>测来测去13：DPDK i40e X710 FDIR Flexbytes</title>
    <link href="https://decodezp.github.io/2019/05/23/test13-dpdk-x710-flexload/"/>
    <id>https://decodezp.github.io/2019/05/23/test13-dpdk-x710-flexload/</id>
    <published>2019-05-23T12:42:12.000Z</published>
    <updated>2019-05-28T12:46:18.398Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Flex-Bytes&quot;&gt;&lt;a href=&quot;#Flex-Bytes&quot; class=&quot;headerlink&quot; title=&quot;Flex Bytes&quot;&gt;&lt;/a&gt;Flex Bytes&lt;/h2&gt;&lt;p&gt;700系列网卡除了提取包头的字段作为散列的依据之外，还可以截取Payload的特定片段作为散列的依据。&lt;/p&gt;
&lt;p&gt;Flexible payload是可以识别出的L2/L3/L4 Header之后的字节，最多可以截取来自于3个不同偏移（OFFSET）的16字节内容。所有的内容需要来自该报文前480字节内。&lt;br&gt;
    
    </summary>
    
      <category term="test" scheme="https://decodezp.github.io/categories/test/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="test" scheme="https://decodezp.github.io/tags/test/"/>
    
      <category term="NIC" scheme="https://decodezp.github.io/tags/NIC/"/>
    
  </entry>
  
  <entry>
    <title>统治者为什么会重复犯同样的错误</title>
    <link href="https://decodezp.github.io/2019/05/22/thoughts9-identical-behavior/"/>
    <id>https://decodezp.github.io/2019/05/22/thoughts9-identical-behavior/</id>
    <published>2019-05-22T12:22:22.000Z</published>
    <updated>2019-05-22T12:23:35.058Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;史书上对自己作死的亡国之君的描述基本上都是类似的。用查找替换把两个名字换一下，基本不影响阅读体验。&lt;/p&gt;
&lt;p&gt;奇怪的点就在于，从第二个亡国之君开始，为什么明明知道已有“亡国之兆”，却仍然不加收敛？&lt;br&gt;
    
    </summary>
    
      <category term="thoughts" scheme="https://decodezp.github.io/categories/thoughts/"/>
    
    
      <category term="thoughts" scheme="https://decodezp.github.io/tags/thoughts/"/>
    
  </entry>
  
  <entry>
    <title>Quickwords28：Skylake Microarchitecture(11)</title>
    <link href="https://decodezp.github.io/2019/05/18/quickwords28-skylake-pipeline-11/"/>
    <id>https://decodezp.github.io/2019/05/18/quickwords28-skylake-pipeline-11/</id>
    <published>2019-05-18T07:48:31.000Z</published>
    <updated>2019-05-18T07:49:50.035Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Store-and-Load-Example&quot;&gt;&lt;a href=&quot;#Store-and-Load-Example&quot; class=&quot;headerlink&quot; title=&quot;Store and Load Example&quot;&gt;&lt;/a&gt;Store and Load Example&lt;/h2&gt;&lt;p&gt;Given the initialized situation like this:&lt;/p&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="hardware" scheme="https://decodezp.github.io/tags/hardware/"/>
    
      <category term="CPU" scheme="https://decodezp.github.io/tags/CPU/"/>
    
  </entry>
  
  <entry>
    <title>测来测去12：DPDK i40e X710 Flow Director Deep Dive(3)</title>
    <link href="https://decodezp.github.io/2019/05/14/test12-dpdk-x710-fdir-mask-3/"/>
    <id>https://decodezp.github.io/2019/05/14/test12-dpdk-x710-fdir-mask-3/</id>
    <published>2019-05-14T11:02:43.000Z</published>
    <updated>2019-05-14T11:05:20.204Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;多于两个input-set的mask&quot;&gt;&lt;a href=&quot;#多于两个input-set的mask&quot; class=&quot;headerlink&quot; title=&quot;多于两个input_set的mask&quot;&gt;&lt;/a&gt;多于两个&lt;code&gt;input_set&lt;/code&gt;的mask&lt;/h2&gt;&lt;p&gt;先说结论，一个&lt;code&gt;pctype&lt;/code&gt;可以设置多个&lt;code&gt;input_set&lt;/code&gt;，但是最多仅能给两个&lt;code&gt;input_set&lt;/code&gt;设置mask。&lt;br&gt;
    
    </summary>
    
      <category term="test" scheme="https://decodezp.github.io/categories/test/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="test" scheme="https://decodezp.github.io/tags/test/"/>
    
      <category term="NIC" scheme="https://decodezp.github.io/tags/NIC/"/>
    
  </entry>
  
  <entry>
    <title>测来测去11：DPDK i40e X710 Flow Director Deep Dive(2)</title>
    <link href="https://decodezp.github.io/2019/05/13/test11-dpdk-x710-fdir-mask-2/"/>
    <id>https://decodezp.github.io/2019/05/13/test11-dpdk-x710-fdir-mask-2/</id>
    <published>2019-05-13T10:46:49.000Z</published>
    <updated>2019-05-13T10:51:29.452Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;同时添加一个TCP-Flow-Director规则&quot;&gt;&lt;a href=&quot;#同时添加一个TCP-Flow-Director规则&quot; class=&quot;headerlink&quot; title=&quot;同时添加一个TCP Flow Director规则&quot;&gt;&lt;/a&gt;同时添加一个TCP Flow Director规则&lt;/h2&gt;&lt;p&gt;在&lt;a href=&quot;https://decodezp.github.io/2019/05/11/test10-dpdk-x710-fdir-mask-1/&quot;&gt;上一篇文章&lt;/a&gt;的基础上，添加一个TCP相关的Fdir操作：&lt;br&gt;
    
    </summary>
    
      <category term="test" scheme="https://decodezp.github.io/categories/test/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="test" scheme="https://decodezp.github.io/tags/test/"/>
    
      <category term="NIC" scheme="https://decodezp.github.io/tags/NIC/"/>
    
  </entry>
  
  <entry>
    <title>测来测去10：DPDK i40e X710 Flow Director Deep Dive(1)</title>
    <link href="https://decodezp.github.io/2019/05/11/test10-dpdk-x710-fdir-mask-1/"/>
    <id>https://decodezp.github.io/2019/05/11/test10-dpdk-x710-fdir-mask-1/</id>
    <published>2019-05-11T06:10:03.000Z</published>
    <updated>2019-05-23T12:48:35.840Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;https://decodezp.github.io/2019/05/06/test9-x710-fdir-mask/&quot;&gt;这篇文章&lt;/a&gt;介绍DPDK i40e X710网卡如何配置Flow director mask的过程中演示了一下如何给UDP流量添加dest Port Mask。首先对当时的配置再做一点细节上的补充：&lt;br&gt;
    
    </summary>
    
      <category term="test" scheme="https://decodezp.github.io/categories/test/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="test" scheme="https://decodezp.github.io/tags/test/"/>
    
      <category term="NIC" scheme="https://decodezp.github.io/tags/NIC/"/>
    
  </entry>
  
  <entry>
    <title>命名的力量</title>
    <link href="https://decodezp.github.io/2019/05/08/thoughts8-master-of-naming/"/>
    <id>https://decodezp.github.io/2019/05/08/thoughts8-master-of-naming/</id>
    <published>2019-05-08T14:38:30.000Z</published>
    <updated>2019-05-08T14:54:16.800Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;To Know the Name of a Thing is to Have Power Over It&lt;br&gt;如果我们知道了一件事物的名字，就有了操控它的力量。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;常言道，人类最深的恐惧都来自于“未知”。那么，什么是“未知”？&lt;br&gt;
    
    </summary>
    
      <category term="thoughts" scheme="https://decodezp.github.io/categories/thoughts/"/>
    
    
      <category term="thoughts" scheme="https://decodezp.github.io/tags/thoughts/"/>
    
  </entry>
  
  <entry>
    <title>测来测去9：DPDK i40e XXV710 Flow Director Mask Configuration</title>
    <link href="https://decodezp.github.io/2019/05/06/test9-x710-fdir-mask/"/>
    <id>https://decodezp.github.io/2019/05/06/test9-x710-fdir-mask/</id>
    <published>2019-05-06T11:59:29.000Z</published>
    <updated>2019-05-06T12:15:36.067Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Flow-Director&quot;&gt;&lt;a href=&quot;#Flow-Director&quot; class=&quot;headerlink&quot; title=&quot;Flow Director&quot;&gt;&lt;/a&gt;Flow Director&lt;/h2&gt;&lt;p&gt;最常见的Flow Director使用方式就是将匹配某个五元组的报文送到一个特定的队列里去。但精确匹配有时候并不能满足全部需求，需要给一些特定的字段加Mask。&lt;br&gt;
    
    </summary>
    
      <category term="test" scheme="https://decodezp.github.io/categories/test/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="test" scheme="https://decodezp.github.io/tags/test/"/>
    
      <category term="NIC" scheme="https://decodezp.github.io/tags/NIC/"/>
    
  </entry>
  
  <entry>
    <title>终端断开任务不中断</title>
    <link href="https://decodezp.github.io/2019/04/27/terminal-nohup-screen/"/>
    <id>https://decodezp.github.io/2019/04/27/terminal-nohup-screen/</id>
    <published>2019-04-27T03:37:12.000Z</published>
    <updated>2019-04-27T03:38:47.925Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;其实是很常见的需求，但之前一直用&lt;code&gt;nohup command &amp;amp;&lt;/code&gt;这种方式。不过有些时候没有充分估计到某些工作的不靠谱性，以为很快能搞定的事，就没用&lt;code&gt;nohup&lt;/code&gt;直接执行，当你快要下班了它还遥遥无期。这个时候也可以先&lt;code&gt;ctrl + z&lt;/code&gt;从前台挂起，然后&lt;code&gt;bg&lt;/code&gt;让它跑到后台去执行，最后再来一个&lt;code&gt;disown -a&lt;/code&gt;，这样就可以放心关了终端早点回家了。下次再用其他终端连接上来之后你的工作仍会在持续执行，但是这时候是不能用&lt;code&gt;fg&lt;/code&gt;这样的命令让它再回到前台执行的，&lt;code&gt;jobs&lt;/code&gt;也不会显示它。&lt;/p&gt;
&lt;p&gt;如果你想持续看到后台进程的输出，以前的办法就是在运行之前就将它重定向到一个文件，后续回来查看文件即可。但如果进程已经开始执行了，再去重定向就稍微费点劲。网上有些用&lt;code&gt;gdb&lt;/code&gt;调的方法，我试了试不是太成功，本来打算继续看看，结果发现还是老老实实用&lt;code&gt;screen&lt;/code&gt;靠谱一点…&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
  </entry>
  
  <entry>
    <title>测来测去8：公有云实例性能实际波动情况</title>
    <link href="https://decodezp.github.io/2019/04/22/test8-cloud-vm-performance/"/>
    <id>https://decodezp.github.io/2019/04/22/test8-cloud-vm-performance/</id>
    <published>2019-04-22T04:49:27.000Z</published>
    <updated>2019-04-22T04:52:22.963Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;公有云作为一种资源打包整合再售卖的商业模式，不可避免地存在多租户共享资源的情况。除了安全问题之外，更多的是需要辨别这种共享对用户各自的性能存在多大的影响。这种影响不仅仅表现在性能的下降，而更多的是表现为性能的不一致：在高峰时段和空闲时段，性能出现较大的波动。&lt;br&gt;
    
    </summary>
    
      <category term="test" scheme="https://decodezp.github.io/categories/test/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="performance" scheme="https://decodezp.github.io/tags/performance/"/>
    
      <category term="test" scheme="https://decodezp.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>Quickwords27 Skylake Microarchitecture(10)</title>
    <link href="https://decodezp.github.io/2019/04/20/quickwords27-skylake-pipeline-10/"/>
    <id>https://decodezp.github.io/2019/04/20/quickwords27-skylake-pipeline-10/</id>
    <published>2019-04-20T05:36:19.000Z</published>
    <updated>2019-04-20T05:39:11.955Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Load-and-Store-instructions&quot;&gt;&lt;a href=&quot;#Load-and-Store-instructions&quot; class=&quot;headerlink&quot; title=&quot;Load and Store instructions&quot;&gt;&lt;/a&gt;Load and Store instructions&lt;/h2&gt;&lt;p&gt;In previous chapters we discussed how does ROB and RS as well as RAT work. You may notice that we did not include &lt;code&gt;load&lt;/code&gt; and &lt;code&gt;store&lt;/code&gt; instruction in the demonstrated examples. This is partly due to simplification reason and partly because of the specialized mechanisms we will introduce in this article.&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="hardware" scheme="https://decodezp.github.io/tags/hardware/"/>
    
      <category term="CPU" scheme="https://decodezp.github.io/tags/CPU/"/>
    
  </entry>
  
  <entry>
    <title>tar命令速查手册</title>
    <link href="https://decodezp.github.io/2019/04/20/tar-cheat-sheet/"/>
    <id>https://decodezp.github.io/2019/04/20/tar-cheat-sheet/</id>
    <published>2019-04-19T19:15:05.000Z</published>
    <updated>2019-04-19T19:17:32.280Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;总是会忘记这个命令后面的各种参数对应的压缩格式，每次都要上网重新搜索。可能也是对这种“查一查就能知道”的信息天生缺乏敏感性，但每次都搜索显得实在不太professional，所以…那就在一个地方查吧 ^^&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
  </entry>
  
  <entry>
    <title>如果你到鲁汶来，一定要喝Stella</title>
    <link href="https://decodezp.github.io/2019/04/19/thoughts7-leuven-stella/"/>
    <id>https://decodezp.github.io/2019/04/19/thoughts7-leuven-stella/</id>
    <published>2019-04-19T06:56:20.000Z</published>
    <updated>2019-05-08T14:54:19.622Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;自打那次正式的告别之后，很久都没有再梦见过鲁汶。那几年大部分的时光，都仿佛跌入了时间的黑洞，如今能找到的，只有下面这篇旧文中的只言片语。刚想要深入挖掘一下脑海中的记忆，却又畏葸不前——毕竟清扫记忆这事，如扫落叶，旋扫旋生。&lt;br&gt;
    
    </summary>
    
      <category term="thoughts" scheme="https://decodezp.github.io/categories/thoughts/"/>
    
    
      <category term="thoughts" scheme="https://decodezp.github.io/tags/thoughts/"/>
    
  </entry>
  
  <entry>
    <title>夜色温柔</title>
    <link href="https://decodezp.github.io/2019/04/17/thoughts6-tender-is-the-night/"/>
    <id>https://decodezp.github.io/2019/04/17/thoughts6-tender-is-the-night/</id>
    <published>2019-04-16T16:06:41.000Z</published>
    <updated>2019-04-19T07:00:49.522Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;好像总是不能沉浸在当下。看着书想着邮件，吃着饭想着项目，看着电影想着停车费，在外面喝酒想着一会回家撸猫。&lt;br&gt;
    
    </summary>
    
      <category term="thoughts" scheme="https://decodezp.github.io/categories/thoughts/"/>
    
    
      <category term="thoughts" scheme="https://decodezp.github.io/tags/thoughts/"/>
    
  </entry>
  
  <entry>
    <title>商业供稿3：2019云计算安全5大趋势</title>
    <link href="https://decodezp.github.io/2019/04/15/commerical3-2019-cloud-security-trends/"/>
    <id>https://decodezp.github.io/2019/04/15/commerical3-2019-cloud-security-trends/</id>
    <published>2019-04-15T12:18:29.000Z</published>
    <updated>2019-04-15T12:23:59.865Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;原载于云杉网络 &lt;a href=&quot;http://www.yunshan.net&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;www.yunshan.net&lt;/a&gt; 微信公众号&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;安全将成为云计算最大的挑战&quot;&gt;&lt;a href=&quot;#安全将成为云计算最大的挑战&quot; class=&quot;headerlink&quot; title=&quot;安全将成为云计算最大的挑战&quot;&gt;&lt;/a&gt;安全将成为云计算最大的挑战&lt;/h2&gt;
    
    </summary>
    
      <category term="commerical" scheme="https://decodezp.github.io/categories/commerical/"/>
    
    
      <category term="commerical" scheme="https://decodezp.github.io/tags/commerical/"/>
    
  </entry>
  
  <entry>
    <title>Quickwords 26 Linux Perf Under The Hood</title>
    <link href="https://decodezp.github.io/2019/04/13/quickwords26-linux-perf-under-the-hood/"/>
    <id>https://decodezp.github.io/2019/04/13/quickwords26-linux-perf-under-the-hood/</id>
    <published>2019-04-12T16:22:44.000Z</published>
    <updated>2019-04-12T16:40:57.653Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Too many &lt;code&gt;perf&lt;/code&gt; usage articles exist on the Internet yet few talks about its source code, mechanism and architecture under the hood. For anyone who’s not satisfied with a black box, this article tries to address this.&lt;/p&gt;
&lt;h2 id=&quot;Hardware-Background-Knowledge&quot;&gt;&lt;a href=&quot;#Hardware-Background-Knowledge&quot; class=&quot;headerlink&quot; title=&quot;Hardware Background Knowledge&quot;&gt;&lt;/a&gt;Hardware Background Knowledge&lt;/h2&gt;&lt;p&gt;You probably know that &lt;code&gt;perf&lt;/code&gt; retrieves CPU hardware PMU counter value at some regular sampling frequency to make everything happen. The path through the hardware value is called &lt;code&gt;MSR(Model-Specific Register)&lt;/code&gt; operations. Note that &lt;code&gt;MSR&lt;/code&gt; is a general designation for various kinds of registers and PMU is just a small portion of it. To be more specific, we are mainly talking about the Performance Event Select Registers and the Performance Monitoring Counters(PMC) which make up the PMU together. By interacting with the Performance Event Select Register at the software side, value of performance events is streaming out via PMC.&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="perf" scheme="https://decodezp.github.io/tags/perf/"/>
    
  </entry>
  
  <entry>
    <title>几句话说清楚25：Skylake微架构(Microarchitecture)剖析(9)</title>
    <link href="https://decodezp.github.io/2019/04/08/quickwords25-skylake-pipeline-9/"/>
    <id>https://decodezp.github.io/2019/04/08/quickwords25-skylake-pipeline-9/</id>
    <published>2019-04-07T17:20:24.000Z</published>
    <updated>2019-04-07T17:25:47.250Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;接&lt;a href=&quot;https://decodezp.github.io/2019/04/06/quickwords24-skylake-pipeline-8/&quot;&gt;上期&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;第六个cycle之后&quot;&gt;&lt;a href=&quot;#第六个cycle之后&quot; class=&quot;headerlink&quot; title=&quot;第六个cycle之后&quot;&gt;&lt;/a&gt;第六个cycle之后&lt;/h2&gt;&lt;p&gt;看一下第六个cycle时会发生什么。&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="hardware" scheme="https://decodezp.github.io/tags/hardware/"/>
    
      <category term="CPU" scheme="https://decodezp.github.io/tags/CPU/"/>
    
  </entry>
  
  <entry>
    <title>几句话说清楚24：Skylake微架构(Microarchitecture)剖析(8)</title>
    <link href="https://decodezp.github.io/2019/04/06/quickwords24-skylake-pipeline-8/"/>
    <id>https://decodezp.github.io/2019/04/06/quickwords24-skylake-pipeline-8/</id>
    <published>2019-04-06T04:58:15.000Z</published>
    <updated>2019-04-06T04:59:55.285Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一个示例介绍Reorder-Buffer-ROB-和Register-Alias-Table-RAT-和Reservation-Station-RS&quot;&gt;&lt;a href=&quot;#一个示例介绍Reorder-Buffer-ROB-和Register-Alias-Table-RAT-和Reservation-Station-RS&quot; class=&quot;headerlink&quot; title=&quot;一个示例介绍Reorder Buffer(ROB)和Register Alias Table(RAT)和Reservation Station(RS)&quot;&gt;&lt;/a&gt;一个示例介绍Reorder Buffer(ROB)和Register Alias Table(RAT)和Reservation Station(RS)&lt;/h2&gt;&lt;p&gt;理解乱序执行（Out-of-Order）的核心其实就是把ROB，RAT和RS这三个组件搞透。&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="https://decodezp.github.io/categories/tech/"/>
    
    
      <category term="tech" scheme="https://decodezp.github.io/tags/tech/"/>
    
      <category term="hardware" scheme="https://decodezp.github.io/tags/hardware/"/>
    
      <category term="CPU" scheme="https://decodezp.github.io/tags/CPU/"/>
    
  </entry>
  
</feed>
