{"title":"DecodeZ","description":"刚日读经，柔日读史","language":null,"link":"https://decodezp.github.io","pubDate":"Mon, 08 Jul 2019 13:10:13 GMT","lastBuildDate":"Mon, 08 Jul 2019 13:24:48 GMT","generator":"hexo-generator-json-feed","webMaster":"Pan Zhang","items":[{"title":"Quickwords31：What Is Inclusive and Exclusive Cache","link":"https://decodezp.github.io/2019/07/08/quickwords31-inclusive-exclusive-cache/","description":"一般对Cache的认知方式我们比较熟悉的对Cache的理解是，首先有3级，L1，L2和L3。这三级依次远离CPU核心，查询数据的速度也依次减慢。当CPU需要一个地址上的数据时，会先去L1查找；当L1没有这个数据的时候，去L2查找；L2也没有的时候，去L3查找。如果还没有，就去内存上去查找。这是我们看待Cache和CPU查询数据时的一般方式。","pubDate":"Mon, 08 Jul 2019 13:10:13 GMT","guid":"https://decodezp.github.io/2019/07/08/quickwords31-inclusive-exclusive-cache/","category":"tech"},{"title":"应许之日","link":"https://decodezp.github.io/2019/06/24/promised-date/","description":"很庆幸自己能活这么久，站在此时此刻的人生节点上，可以闻到更好的时光还在后面。","pubDate":"Mon, 24 Jun 2019 14:05:19 GMT","guid":"https://decodezp.github.io/2019/06/24/promised-date/","category":"thoughts"},{"title":"5分钟经典英文技术演讲3：如何应对信息过载并提高生产效率-Scott Hanselman","link":"https://decodezp.github.io/2019/06/19/eng-talk3-scaling-yourself/","description":"一个人的能力上限很大程度上取决于他获取信息的能力。 而能力增长的速度与获取信息的质量正相关。 不可否认，大量优质的技术内容都基于英文。“5分钟经典英文技术演讲”专门撷取国外最有价值的纯英文技术演讲，以最精炼的形式将信息传达给国内的技术同侪，绕过网络政策和语言的障碍，实现中西方技术世界无壁垒的信息同步。 最新内容将发布于DecodeZ: decodezp.github.io 往期回顾1：如何快速掌握新技术往期回顾2：软件设计真正的精髓 GOTO2012: Scaling Yourself原视频 摘要：信息过载的时代，能否找到一种在信息洪流中独善其身的方法，让我们专注于真正重要事情？当生活/工作的范畴一再扩大，我们也需要延展自身的边界，在充分利用信息的同时，保持持续的生产效率。","pubDate":"Wed, 19 Jun 2019 12:04:22 GMT","guid":"https://decodezp.github.io/2019/06/19/eng-talk3-scaling-yourself/","category":"ENG_talk"},{"title":"Quickwords30：Use Both kprobe and uprobe At The Same Time","link":"https://decodezp.github.io/2019/06/18/quickwords30-kprobe-uprobe-both/","description":"用ftrace可以观察内核方法的调用信息。用uprobe可以观察用户空间二进制可执行文件中方法的调用信息。奇怪的是当你想把两个合在一起用的时候，比如你想看到内核调度器调度到了你关心的用户进程，同时也想知道调度之后，该进程会执行哪个方法的时候，网络上我没有找到任何资料教你如何去做。按说这应该是一个对各类系统问题诊断很有用的能力。 也许是太简单了？下面用一个示例说明。 内核版本12uname -r4.19.6-1.el7.elrepo.x86_64 有点新，不过不害事。","pubDate":"Tue, 18 Jun 2019 13:37:51 GMT","guid":"https://decodezp.github.io/2019/06/18/quickwords30-kprobe-uprobe-both/","category":"tech"},{"title":"Quickwords29：AMD ZEN 2 Microarchitecture Overview","link":"https://decodezp.github.io/2019/06/12/quickwords29-amd-zen2-microarch/","description":"AMD ZEN 2在消费者和服务器市场AMD推出了全新的基于ZEN 2微架构的处理器，包括Ryzen 3000系列和EPYC系列。在市场宣传方面均给出了高于Intel竞品处理器的性能。我这里还没有拿到实际的产品进行性能测试，但可以先从公开的微架构设计的角度看一看AMD这款新产品的大体思路。 Microarchitecture Overview 上图是ZEN 2产品的微架构示意图。从微架构的“架构”设计上，感觉业界基本上遵从了同一套模式，很难有创新和突破。均是基于以下三个部分：","pubDate":"Tue, 11 Jun 2019 21:59:06 GMT","guid":"https://decodezp.github.io/2019/06/12/quickwords29-amd-zen2-microarch/","category":"tech"},{"title":"拔智齿","link":"https://decodezp.github.io/2019/06/05/tooth-extraction/","description":"拔智齿是一个磨人的过程。真正拔的时候其实还好，但决定去拔之前，要做很多心理建设工作。尤其是对牙一直很好的人来说，去拔牙就仿佛承认了之前对牙齿的乐观和与之俱来的优越感都只是一场幻觉。","pubDate":"Wed, 05 Jun 2019 12:02:29 GMT","guid":"https://decodezp.github.io/2019/06/05/tooth-extraction/","category":"life"},{"title":"Gartner预测误差统计","link":"https://decodezp.github.io/2019/06/03/gartner-prediction/","description":"Gartner的预测Gartner表面上是一家咨询公司，实际上是一家市场公关公司。不仅通过一些市场工具给厂商打广告，还直接给某样技术打广告，当然也兼做一些资源对接的中介服务。至于Gartner的分析报告，即便每年需要几十万的“咨询费”才能阅读，但我是从来没有完整看完过其中任何一篇，因为他们报告的题目都拟得非常好——非常精炼，也非常准确——所以有时候看完题目就好了。 每当Gartner新公布了一项市场数字和指标之后，都会被各家媒体和相关厂商疯狂引用，作为论证市场繁荣和增长预期的最有力论据。但年复一年，我们永远盯住的是“下一个丰收的年景”，却不怎么关心当下的市场是否曾被准确勾画。以往知来，我们就以年年火热的云计算市场为例，统计一下Gartner的历史预测准确率。","pubDate":"Mon, 03 Jun 2019 12:30:27 GMT","guid":"https://decodezp.github.io/2019/06/03/gartner-prediction/","category":"tech"},{"title":"测来测去14：Phoronix tinymembench结果不理想的可能原因","link":"https://decodezp.github.io/2019/05/28/test14-phoronix-tinymembench/","description":"Phoronix tinymembench这个测试经常用来衡量CPUmemcpy和memset这两个基本操作的性能。最近在执行针对两款CPU的性能测试中，发现某款相对”高端“的CPU在这两个测试中表现与相对“低端”的CPU相比，存在较大差距。","pubDate":"Tue, 28 May 2019 12:44:02 GMT","guid":"https://decodezp.github.io/2019/05/28/test14-phoronix-tinymembench/","category":"test"},{"title":"测来测去13：DPDK i40e X710 FDIR Flexbytes","link":"https://decodezp.github.io/2019/05/23/test13-dpdk-x710-flexload/","description":"Flex Bytes700系列网卡除了提取包头的字段作为散列的依据之外，还可以截取Payload的特定片段作为散列的依据。 Flexible payload是可以识别出的L2/L3/L4 Header之后的字节，最多可以截取来自于3个不同偏移（OFFSET）的16字节内容。所有的内容需要来自该报文前480字节内。","pubDate":"Thu, 23 May 2019 12:42:12 GMT","guid":"https://decodezp.github.io/2019/05/23/test13-dpdk-x710-flexload/","category":"test"},{"title":"统治者为什么会重复犯同样的错误","link":"https://decodezp.github.io/2019/05/22/thoughts9-identical-behavior/","description":"史书上对自己作死的亡国之君的描述基本上都是类似的。用查找替换把两个名字换一下，基本不影响阅读体验。 奇怪的点就在于，从第二个亡国之君开始，为什么明明知道已有“亡国之兆”，却仍然不加收敛？","pubDate":"Wed, 22 May 2019 12:22:22 GMT","guid":"https://decodezp.github.io/2019/05/22/thoughts9-identical-behavior/","category":"thoughts"},{"title":"Quickwords28：Skylake Microarchitecture(11)","link":"https://decodezp.github.io/2019/05/18/quickwords28-skylake-pipeline-11/","description":"Store and Load ExampleGiven the initialized situation like this:","pubDate":"Sat, 18 May 2019 07:48:31 GMT","guid":"https://decodezp.github.io/2019/05/18/quickwords28-skylake-pipeline-11/","category":"tech"},{"title":"测来测去12：DPDK i40e X710 Flow Director Deep Dive(3)","link":"https://decodezp.github.io/2019/05/14/test12-dpdk-x710-fdir-mask-3/","description":"多于两个input_set的mask先说结论，一个pctype可以设置多个input_set，但是最多仅能给两个input_set设置mask。","pubDate":"Tue, 14 May 2019 11:02:43 GMT","guid":"https://decodezp.github.io/2019/05/14/test12-dpdk-x710-fdir-mask-3/","category":"test"},{"title":"测来测去11：DPDK i40e X710 Flow Director Deep Dive(2)","link":"https://decodezp.github.io/2019/05/13/test11-dpdk-x710-fdir-mask-2/","description":"同时添加一个TCP Flow Director规则在上一篇文章的基础上，添加一个TCP相关的Fdir操作：","pubDate":"Mon, 13 May 2019 10:46:49 GMT","guid":"https://decodezp.github.io/2019/05/13/test11-dpdk-x710-fdir-mask-2/","category":"test"},{"title":"测来测去10：DPDK i40e X710 Flow Director Deep Dive(1)","link":"https://decodezp.github.io/2019/05/11/test10-dpdk-x710-fdir-mask-1/","description":"在这篇文章介绍DPDK i40e X710网卡如何配置Flow director mask的过程中演示了一下如何给UDP流量添加dest Port Mask。首先对当时的配置再做一点细节上的补充：","pubDate":"Sat, 11 May 2019 06:10:03 GMT","guid":"https://decodezp.github.io/2019/05/11/test10-dpdk-x710-fdir-mask-1/","category":"test"},{"title":"命名的力量","link":"https://decodezp.github.io/2019/05/08/thoughts8-master-of-naming/","description":"一 To Know the Name of a Thing is to Have Power Over It如果我们知道了一件事物的名字，就有了操控它的力量。 常言道，人类最深的恐惧都来自于“未知”。那么，什么是“未知”？","pubDate":"Wed, 08 May 2019 14:38:30 GMT","guid":"https://decodezp.github.io/2019/05/08/thoughts8-master-of-naming/","category":"thoughts"},{"title":"测来测去9：DPDK i40e XXV710 Flow Director Mask Configuration","link":"https://decodezp.github.io/2019/05/06/test9-x710-fdir-mask/","description":"Flow Director最常见的Flow Director使用方式就是将匹配某个五元组的报文送到一个特定的队列里去。但精确匹配有时候并不能满足全部需求，需要给一些特定的字段加Mask。","pubDate":"Mon, 06 May 2019 11:59:29 GMT","guid":"https://decodezp.github.io/2019/05/06/test9-x710-fdir-mask/","category":"test"},{"title":"终端断开任务不中断","link":"https://decodezp.github.io/2019/04/27/terminal-nohup-screen/","description":"其实是很常见的需求，但之前一直用nohup command &amp;这种方式。不过有些时候没有充分估计到某些工作的不靠谱性，以为很快能搞定的事，就没用nohup直接执行，当你快要下班了它还遥遥无期。这个时候也可以先ctrl + z从前台挂起，然后bg让它跑到后台去执行，最后再来一个disown -a，这样就可以放心关了终端早点回家了。下次再用其他终端连接上来之后你的工作仍会在持续执行，但是这时候是不能用fg这样的命令让它再回到前台执行的，jobs也不会显示它。 如果你想持续看到后台进程的输出，以前的办法就是在运行之前就将它重定向到一个文件，后续回来查看文件即可。但如果进程已经开始执行了，再去重定向就稍微费点劲。网上有些用gdb调的方法，我试了试不是太成功，本来打算继续看看，结果发现还是老老实实用screen靠谱一点…","pubDate":"Sat, 27 Apr 2019 03:37:12 GMT","guid":"https://decodezp.github.io/2019/04/27/terminal-nohup-screen/","category":"tech"},{"title":"测来测去8：公有云实例性能实际波动情况","link":"https://decodezp.github.io/2019/04/22/test8-cloud-vm-performance/","description":"公有云作为一种资源打包整合再售卖的商业模式，不可避免地存在多租户共享资源的情况。除了安全问题之外，更多的是需要辨别这种共享对用户各自的性能存在多大的影响。这种影响不仅仅表现在性能的下降，而更多的是表现为性能的不一致：在高峰时段和空闲时段，性能出现较大的波动。","pubDate":"Mon, 22 Apr 2019 04:49:27 GMT","guid":"https://decodezp.github.io/2019/04/22/test8-cloud-vm-performance/","category":"test"},{"title":"Quickwords27 Skylake Microarchitecture(10)","link":"https://decodezp.github.io/2019/04/20/quickwords27-skylake-pipeline-10/","description":"Load and Store instructionsIn previous chapters we discussed how does ROB and RS as well as RAT work. You may notice that we did not include load and store instruction in the demonstrated examples. This is partly due to simplification reason and partly because of the specialized mechanisms we will introduce in this article.","pubDate":"Sat, 20 Apr 2019 05:36:19 GMT","guid":"https://decodezp.github.io/2019/04/20/quickwords27-skylake-pipeline-10/","category":"tech"},{"title":"tar命令速查手册","link":"https://decodezp.github.io/2019/04/20/tar-cheat-sheet/","description":"总是会忘记这个命令后面的各种参数对应的压缩格式，每次都要上网重新搜索。可能也是对这种“查一查就能知道”的信息天生缺乏敏感性，但每次都搜索显得实在不太professional，所以…那就在一个地方查吧 ^^","pubDate":"Fri, 19 Apr 2019 19:15:05 GMT","guid":"https://decodezp.github.io/2019/04/20/tar-cheat-sheet/","category":"tech"},{"title":"如果你到鲁汶来，一定要喝Stella","link":"https://decodezp.github.io/2019/04/19/thoughts7-leuven-stella/","description":"自打那次正式的告别之后，很久都没有再梦见过鲁汶。那几年大部分的时光，都仿佛跌入了时间的黑洞，如今能找到的，只有下面这篇旧文中的只言片语。刚想要深入挖掘一下脑海中的记忆，却又畏葸不前——毕竟清扫记忆这事，如扫落叶，旋扫旋生。","pubDate":"Fri, 19 Apr 2019 06:56:20 GMT","guid":"https://decodezp.github.io/2019/04/19/thoughts7-leuven-stella/","category":"thoughts"},{"title":"夜色温柔","link":"https://decodezp.github.io/2019/04/17/thoughts6-tender-is-the-night/","description":"好像总是不能沉浸在当下。看着书想着邮件，吃着饭想着项目，看着电影想着停车费，在外面喝酒想着一会回家撸猫。","pubDate":"Tue, 16 Apr 2019 16:06:41 GMT","guid":"https://decodezp.github.io/2019/04/17/thoughts6-tender-is-the-night/","category":"thoughts"},{"title":"商业供稿3：2019云计算安全5大趋势","link":"https://decodezp.github.io/2019/04/15/commerical3-2019-cloud-security-trends/","description":"原载于云杉网络 www.yunshan.net 微信公众号 安全将成为云计算最大的挑战","pubDate":"Mon, 15 Apr 2019 12:18:29 GMT","guid":"https://decodezp.github.io/2019/04/15/commerical3-2019-cloud-security-trends/","category":"commerical"},{"title":"Quickwords 26 Linux Perf Under The Hood","link":"https://decodezp.github.io/2019/04/13/quickwords26-linux-perf-under-the-hood/","description":"Too many perf usage articles exist on the Internet yet few talks about its source code, mechanism and architecture under the hood. For anyone who’s not satisfied with a black box, this article tries to address this. Hardware Background KnowledgeYou probably know that perf retrieves CPU hardware PMU counter value at some regular sampling frequency to make everything happen. The path through the hardware value is called MSR(Model-Specific Register) operations. Note that MSR is a general designation for various kinds of registers and PMU is just a small portion of it. To be more specific, we are mainly talking about the Performance Event Select Registers and the Performance Monitoring Counters(PMC) which make up the PMU together. By interacting with the Performance Event Select Register at the software side, value of performance events is streaming out via PMC.","pubDate":"Fri, 12 Apr 2019 16:22:44 GMT","guid":"https://decodezp.github.io/2019/04/13/quickwords26-linux-perf-under-the-hood/","category":"tech"},{"title":"几句话说清楚25：Skylake微架构(Microarchitecture)剖析(9)","link":"https://decodezp.github.io/2019/04/08/quickwords25-skylake-pipeline-9/","description":"接上期。 第六个cycle之后看一下第六个cycle时会发生什么。","pubDate":"Sun, 07 Apr 2019 17:20:24 GMT","guid":"https://decodezp.github.io/2019/04/08/quickwords25-skylake-pipeline-9/","category":"tech"}]}