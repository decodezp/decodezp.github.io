{"title":"DecodeZ","description":"刚日读经，柔日读史","language":null,"link":"https://decodezp.github.io","pubDate":"Tue, 20 Oct 2020 14:53:34 GMT","lastBuildDate":"Tue, 20 Oct 2020 15:01:11 GMT","generator":"hexo-generator-json-feed","webMaster":"Pan Zhang","items":[{"title":"测来测去25:Async_Mod_Nginx QATzip提升小文件压缩QPS","link":"https://decodezp.github.io/2020/10/20/test25-qat-small-file-compression-optimization/","description":"一般我们会利用Async_mode_nginx配合QAT卸载HTTPS流量，但也有一些用户希望能够仅使用QAT提供的HTTP压缩能力，主要是为了减少公网带宽的占用。这个功能可以利用Async_mode_nginx结合QATzip来完成。 但基于QAT硬件条件的考虑，对小文件的压缩支持不如对大文件的好，特别是当文件大小小于10KB的时候，使用了QAT硬件压缩的QPS会低于使用软件（gzip）压缩的QPS。这个时候可以打开Async_mode_nginx的配置文件：","pubDate":"Tue, 20 Oct 2020 14:53:34 GMT","guid":"https://decodezp.github.io/2020/10/20/test25-qat-small-file-compression-optimization/","category":"tech"},{"title":"蝴蝶泉","link":"https://decodezp.github.io/2020/10/11/thoughts15-butterfly-spring/","description":"二十年前第一次去云南，我坐了三天三夜的火车。到达昆明之后，又去了石林和大理。那时年纪尚小，又不知人文地理，自是懵懵懂懂走马观花。算到而今，能回想起来的经过十不存一。岁驰时移，所谓”彩云之南“，于我更多的只是在旅游APP填写足迹时聊以凑数。若当真讲讲心得，其实与没去过无异。 不意今年双节仓促之中竟又成行。北京飞昆明，只需半天足矣；动车至大理，也不过像打车到新修的廊坊大兴机场。至此才算是真正见过了滇池和洱海。不知为何我印象中这两个都是如后海这般的“市内人造景观”，却不知即便曾目遇亲见，也可能错得离谱。唯有蝴蝶泉，久别重逢，历历如昨。","pubDate":"Sun, 11 Oct 2020 06:31:54 GMT","guid":"https://decodezp.github.io/2020/10/11/thoughts15-butterfly-spring/","category":"thoughts"},{"title":"测来测去24:QAT使用大页hugepage","link":"https://decodezp.github.io/2020/07/22/test24-qat-hugepage/","description":"实践中，使用大页的QAT应用（尤其是Nginx)都比较稳定，已经用大页这个方法修复了很多生产环境中的疑难杂症，列举几个：","pubDate":"Wed, 22 Jul 2020 08:45:26 GMT","guid":"https://decodezp.github.io/2020/07/22/test24-qat-hugepage/","category":"tech"},{"title":"几句话说清楚44：什么是微码Microcode","link":"https://decodezp.github.io/2020/07/12/quickwords44-microcode/","description":"每当听到有人说“这个问题更新一下微码就好了”，就觉得这个哥哥怎么这么迷人，好像在哪里见过。为了也让自己变成这种迷人的哥哥，我也研究了一下到底什么是微码。","pubDate":"Sun, 12 Jul 2020 06:09:31 GMT","guid":"https://decodezp.github.io/2020/07/12/quickwords44-microcode/","category":"tech"},{"title":"毫无来由","link":"https://decodezp.github.io/2020/07/04/thoughts14-no-reasons/","description":"如果生活中发生了一件很难解释的事情，那么这件事无论重要不重要，都会一直盘桓在我们的心里。","pubDate":"Sat, 04 Jul 2020 03:09:09 GMT","guid":"https://decodezp.github.io/2020/07/04/thoughts14-no-reasons/","category":"thoughts"},{"title":"几句话说清楚43:什么是云原生Cloud Native","link":"https://decodezp.github.io/2020/05/23/quickwords43-what-is-cloudnative/","description":"容器就是云原生？微服务就是云原生？K8S就是云原生？","pubDate":"Sat, 23 May 2020 03:43:48 GMT","guid":"https://decodezp.github.io/2020/05/23/quickwords43-what-is-cloudnative/","category":"tech"},{"title":"几句话说清楚42:Xeon Scalable CPU Cache Coherence处理流程(2)","link":"https://decodezp.github.io/2020/05/14/quickwords42-cache-coherence-2/","description":"在上一篇文章中我们介绍了在Non-inclusive缓存第一次读取的读取数据的过程。其中有几个关键点在于： 数据不是首先进入L3缓存再进入L2缓存，而是直接进入L2缓存 数据所在Cache Line的状态会被记录在它自己的Home节点的Snoop Filter中 所有LLC中的数据和Snoop Filter中的数据可以涵盖此时CPU所有缓存中的数据，只是会有重复的 Snoop Filter和LLC是Exclusive关系，在Snoop Filter中的数据不会同时存在于LLC中，反之亦然","pubDate":"Thu, 14 May 2020 12:40:46 GMT","guid":"https://decodezp.github.io/2020/05/14/quickwords42-cache-coherence-2/","category":"tech"},{"title":"几句话说清楚41:Xeon Scalable CPU Cache Coherence处理流程(1)","link":"https://decodezp.github.io/2020/04/17/quickwords40-cache-coherence-1/","description":"先明确一下Cache Coherence出现的原因：多核处理器中，同一段数据可能在多个私有Cache中同时存在。多CPU核需要对该数据进行读写操作，为了保证程序执行结果的正确性，这多个CPU之间需要互相“通信”才能确保自己拿来参与计算的数据是应该用的数据。","pubDate":"Fri, 17 Apr 2020 15:52:09 GMT","guid":"https://decodezp.github.io/2020/04/17/quickwords40-cache-coherence-1/","category":"tech"},{"title":"几句话说清楚40:什么是Outstanding Cache Miss","link":"https://decodezp.github.io/2020/03/12/quickwords40-outstanding-cache-miss/","description":"在阅读CPU PMU事件文档或其他一些相关资料的时候，总是会看到”Outstanding Cache Miss”这类描述。对于Cache Miss大家应该比较熟悉，但什么叫做”Outstanding Cache Miss”就需要再作一下说明了。","pubDate":"Thu, 12 Mar 2020 01:10:35 GMT","guid":"https://decodezp.github.io/2020/03/12/quickwords40-outstanding-cache-miss/","category":"tech"},{"title":"几句话说清楚39:什么是Snoop Filter Back Invalidation","link":"https://decodezp.github.io/2020/02/03/quickwords39-snoopfilter-back-invalidation/","description":"前面提到了Skylake的CPU对缓存的结构进行了一番改动，L2和L3缓存从Inclusive的关系变为了Non-inclusive。这个变化就引入了Skylake中专用的Snoop Filter。和所有Snoop Filter一样，都是服务于MESI协议，探测一下同一条Cache Line在不同的CPU核中的状态。","pubDate":"Mon, 03 Feb 2020 15:06:16 GMT","guid":"https://decodezp.github.io/2020/02/03/quickwords39-snoopfilter-back-invalidation/","category":"tech"},{"title":"北魏司徒东郡公崔浩教你如何忽悠领导","link":"https://decodezp.github.io/2020/02/03/history4-cuihao/","description":"“崔浩”这个名字很普通，普通到今人还有很多人和他同名。但官拜三公的北魏东郡公崔浩并不是一个“差不多先生”。把这么普通的名字放在这么神奇的男人身上，让人在读史料的时候都能产生一种出戏的感觉。 说实话，崔浩当上北魏的司徒并不是什么值得一提的事情。他本就出身高门望族，祖上也有人当过曹魏的司空，之后祖祖辈辈又在当公务员这条路上颇有家学。正遇国际形势风云变幻的乱世，国家培养个干部也不容易，有如此人才自当是要人尽其用。 崔浩也没让领导们失望，历仕道武帝、明元帝和太武帝三朝，为北魏东征西讨开疆扩土立下了不世之功。除了在谋略上“自比张良”之外，崔浩还精研各类天文星象卜筮谶语等杂学，同时还喜欢对魏国臣民的价值观、世界观发表看法，《资治通鉴》载：","pubDate":"Mon, 03 Feb 2020 14:51:55 GMT","guid":"https://decodezp.github.io/2020/02/03/history4-cuihao/","category":"history"},{"title":"几句话说清楚38:什么是 Memory Disambiguation","link":"https://decodezp.github.io/2020/02/03/quickwords38-memory-disambiguation/","description":"首先看一下disambiguation这个单词在字典中的意思：","pubDate":"Mon, 03 Feb 2020 14:34:59 GMT","guid":"https://decodezp.github.io/2020/02/03/quickwords38-memory-disambiguation/","category":"tech"},{"title":"测来测去23:i40e_vlan_tpid_set():Set switch config failed aq_err:14","link":"https://decodezp.github.io/2020/01/06/test23-Set-switch-config-failed-aq-err/","description":"把X722网卡的固件升级到4.10或4.11版本之后运行DPDK-19.02及之前的版本都会出这个问题：","pubDate":"Mon, 06 Jan 2020 05:31:27 GMT","guid":"https://decodezp.github.io/2020/01/06/test23-Set-switch-config-failed-aq-err/","category":"tech"},{"title":"其远而无所至极","link":"https://decodezp.github.io/2020/01/03/thoughts13-the-farthest-place/","description":"故事要怎么开始呢，仿佛本就没有什么开始。直到去年下半年之前，我都无法确切地说出自己要成为怎样的人。心里虽有些模模糊糊的轮廓，却没有再看清楚一点的念头，因为害怕清晰的影像反而会让自己失望。 去年4月有一个很神奇的契机，成为了点燃浩浩苍穹的星火。我现在犹记得接完电话之后的那股强烈的预感。但这仍然不是故事的开始，甚至2017年12月取得那张凭证也不是开始，应该说，所有我们以为是开始的，都可以找到另外一件事，那些开始不过是这件事的结果。","pubDate":"Fri, 03 Jan 2020 12:22:25 GMT","guid":"https://decodezp.github.io/2020/01/03/thoughts13-the-farthest-place/","category":"thoughts"},{"title":"几句话说清楚37:Skylake Non-inclusive缓存和Snoop Filter的关系","link":"https://decodezp.github.io/2019/12/23/quickwords37-skylake-cache-snoop-filter/","description":"Skylake的缓存设计使用了Non-inclusive的架构设计，同时调大了L2缓存的大小。简单来说，区别就是以前从内存读入的数据会同时进入L3和L2缓存，而现在会只进入L2缓存，当该数据从L2缓存中清除的时候，才会进入L3缓存。 在以前的缓存架构中，L2缓存中的数据是L3缓存数据的真子集。而Skylake的架构中，L2和L3的数据在绝大部分时间中是独占的(exclusive)的，即二者所缓存的数据没有重叠。但注意，Skylake的架构是Non-inclusive，而不是严格的exclusive，是因为当同一条Cache Line在多个CPU核的L2缓存中都存在时，L3缓存中也有该Cache Line的数据。","pubDate":"Sun, 22 Dec 2019 16:05:40 GMT","guid":"https://decodezp.github.io/2019/12/23/quickwords37-skylake-cache-snoop-filter/","category":"tech"},{"title":"怎样讲一个好故事","link":"https://decodezp.github.io/2019/12/22/thoughts12-how-to-make-a-good-story/","description":"人的一切知识和学问都是从故事中获取的。讲故事不仅仅是人类传承知识和文化的手段，同时也是获得理解和支持的最有效的方式。并且，一个经过设计(Engineered)的故事具备以虚驭实的能力，这种一种让人着迷的力量。怎样讲出一个好的故事，就是这篇文章想要讲的故事。 所有故事都有一个开头，这个开头的作用不在于交代背景，也不在于用离奇的描述“抓住眼球”，而在于将读者代入到故事中去。一定要出现读者所熟悉的元素、符号、场景和经历，或者没有直接出现，但能够激发读者去联想，去自己的认知库中检索和关联的意象。","pubDate":"Sun, 22 Dec 2019 14:26:27 GMT","guid":"https://decodezp.github.io/2019/12/22/thoughts12-how-to-make-a-good-story/","category":"thoughts"},{"title":"快乐清单","link":"https://decodezp.github.io/2019/12/05/thoughts11-happiness-list/","description":"开始了一项早就打算开始的项目：把每天快乐的瞬间都记录下来。Google Drive中这个简单的Excel表格，被我命名为“快乐清单”。","pubDate":"Wed, 04 Dec 2019 23:08:49 GMT","guid":"https://decodezp.github.io/2019/12/05/thoughts11-happiness-list/","category":"thoughts"},{"title":"测来测去22：DPDK i40e fdir+rss+reta实现相同flow type不同input_set散列","link":"https://decodezp.github.io/2019/11/26/test22-fdir-rss-reta/","description":"问题i40e网卡，同样的flow type，比如RTE_ETH_FLOW_NONFRAG_IPV4_UDP，需求是某一特定Dst Port的报文到rx队列1，某一特定Src IP + Dst IP的报文到rx队列2，或其他类似的针对相同flow type的需求。","pubDate":"Tue, 26 Nov 2019 11:07:58 GMT","guid":"https://decodezp.github.io/2019/11/26/test22-fdir-rss-reta/","category":"tech"},{"title":"怎样做好市场工作","link":"https://decodezp.github.io/2019/11/17/thoughts10-how-to-do-marketing/","description":"市场工作是提高产品价值所要进行的最重要的工作。市场工作并不是围绕产品的工作，也不是围绕客户的工作，而是围绕符号的工作——构建关于一个特定符号的意象。这个符号代表你想要卖出去的东西，而意象的作用在于，它不会改变人们对你产品的认知，而是让人们改变对自我的认知，即便那只是一种想象。","pubDate":"Sun, 17 Nov 2019 09:34:32 GMT","guid":"https://decodezp.github.io/2019/11/17/thoughts10-how-to-do-marketing/","category":"thoughts"},{"title":"QuickWords 35： Perf probe usage","link":"https://decodezp.github.io/2019/11/07/quickwords35-perf-probe-usage/","description":"查看用户空间binary/.so文件可用函数 perf probe -F -x /usr/lib64/libopenvswitch-2.so.7.0.0 查看可以被probe的源码行","pubDate":"Thu, 07 Nov 2019 10:50:46 GMT","guid":"https://decodezp.github.io/2019/11/07/quickwords35-perf-probe-usage/","category":"tech"},{"title":"Loadbalancer Product Trends","link":"https://decodezp.github.io/2019/10/31/product2-loadbalancer-trends/","description":"So what is going on? There are mainly 4 kinds of work.","pubDate":"Thu, 31 Oct 2019 11:37:18 GMT","guid":"https://decodezp.github.io/2019/10/31/product2-loadbalancer-trends/","category":"tech,product"},{"title":"测来测去21：在ftrace中拿到event的user-space stack trace","link":"https://decodezp.github.io/2019/10/30/test21-uprobe-userstacktrace/","description":"问题在开启了ftrace中的一些事件之后，可以用function_graph的trace拿到在内核态的callstack。但有些时候我们希望能拿到用户态程序的callstack，这样我们就能知道是那些方法触发了某一事件，或者我们直接希望uprobe的事件发生时，能够看到该事件对应的callstack，也会是一个很有价值的信息。 阅读文档本来的计划是，搞一个什么ftrace callback的内核模块，模块里面调用一些save_stack_trace_user()这类的方法，但是感觉虽然理论上行得通，但是实际上系统里敢让你塞一个内核模块进去的企业太少，所以暂时先放弃这个方案。","pubDate":"Wed, 30 Oct 2019 11:24:43 GMT","guid":"https://decodezp.github.io/2019/10/30/test21-uprobe-userstacktrace/","category":"test"},{"title":"QuickWords 34： DPDK i40e 82599网卡发送Tx丢包问题","link":"https://decodezp.github.io/2019/10/17/quickwords34-dpdk-tx-hang/","description":"现象表现为在DPDK场景下网卡丢包或者发送队列Hang住。如果用GDB跟进去的话会发现是网卡的DD标志位未置位。","pubDate":"Wed, 16 Oct 2019 19:11:39 GMT","guid":"https://decodezp.github.io/2019/10/17/quickwords34-dpdk-tx-hang/","category":"tech"},{"title":"金罍深深酌","link":"https://decodezp.github.io/2019/10/12/leuven-mem/","description":"一2012年3月，我在布鲁塞尔南站7号站台见到了高中同学L。","pubDate":"Sat, 12 Oct 2019 12:33:29 GMT","guid":"https://decodezp.github.io/2019/10/12/leuven-mem/","category":"life"},{"title":"Shell命令行中感叹号!的运用","link":"https://decodezp.github.io/2019/09/25/exclamation-mark-shell/","description":"!!重复执行上一条命令直接输入!!，不过我更喜欢按上方向键…","pubDate":"Wed, 25 Sep 2019 12:10:27 GMT","guid":"https://decodezp.github.io/2019/09/25/exclamation-mark-shell/","category":"tech"}]}